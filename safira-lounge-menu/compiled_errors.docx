Compiled with problems:
×
ERROR in src/components/Admin/ProductFilters.tsx:302:15
TS2322: Type 'string | PartialMultilingualText' is not assignable to type 'ReactI18NextChildren | Iterable<ReactI18NextChildren>'.
  Type 'PartialMultilingualText' is not assignable to type 'ReactI18NextChildren | Iterable<ReactI18NextChildren>'.
    300 |           {categories.map(cat => (
    301 |             <option key={cat.id} value={cat.id}>
  > 302 |               {getCategoryName(cat)}
        |               ^^^^^^^^^^^^^^^^^^^^^^
    303 |             </option>
    304 |           ))}
    305 |         </FilterSelect>
ERROR in src/components/Admin/ProductForm.tsx:393:19
TS2322: Type 'string | PartialMultilingualText' is not assignable to type 'ReactI18NextChildren | Iterable<ReactI18NextChildren>'.
    391 |               {categories.map(cat => (
    392 |                 <option key={cat.id} value={cat.id}>
  > 393 |                   {getCategoryName(cat)}
        |                   ^^^^^^^^^^^^^^^^^^^^^^
    394 |                 </option>
    395 |               ))}
    396 |             </Select>
ERROR in src/components/Admin/ProductManagerContainer.tsx:740:11
TS2322: Type '(categoryId: string, newPrice: number) => Promise<{ message: string; updatedCount: number; newPrice: number; }>' is not assignable to type '(categoryId: string, newPrice: number) => Promise<BulkPriceUpdateResult>'.
  Type 'Promise<{ message: string; updatedCount: number; newPrice: number; }>' is not assignable to type 'Promise<BulkPriceUpdateResult>'.
    Type '{ message: string; updatedCount: number; newPrice: number; }' is not assignable to type 'BulkPriceUpdateResult'.
    738 |         <BulkActions
    739 |           selectedProducts={selectedProducts}
  > 740 |           onBulkPriceUpdate={async (categoryId, newPrice) => {
        |           ^^^^^^^^^^^^^^^^^
    741 |             const result = await bulkUpdateTobaccoPrice(categoryId, newPrice);
    742 |             await loadProducts();
    743 |             return result;
ERROR in src/components/Admin/TobaccoCatalog.tsx:581:48
TS2345: Argument of type 'FlexibleText' is not assignable to parameter of type 'string | { [key: string]: string; }'.
  Type 'MultilingualText' is not assignable to type 'string | { [key: string]: string; }'.
    Type 'MultilingualText' is not assignable to type '{ [key: string]: string; }'.
      Index signature for type 'string' is missing in type 'MultilingualText'.
    579 |               <TobaccoHeader>
    580 |                 <TobaccoInfo>
  > 581 |                   <TobaccoName>{getTobaccoName(tobacco.name)}</TobaccoName>
        |                                                ^^^^^^^^^^^^
    582 |                   <TobaccoBrand>{tobacco.brand}</TobaccoBrand>
    583 |                 </TobaccoInfo>
    584 |                 <TobaccoActions>
ERROR in src/components/Admin/TobaccoCatalog.tsx:602:38
TS2345: Argument of type 'FlexibleText | undefined' is not assignable to parameter of type 'string | { [key: string]: string; } | undefined'.
  Type 'MultilingualText' is not assignable to type 'string | { [key: string]: string; } | undefined'.
    Type 'MultilingualText' is not assignable to type '{ [key: string]: string; }'.
      Index signature for type 'string' is missing in type 'MultilingualText'.
    600 |               </TobaccoHeader>
    601 |
  > 602 |               {getTobaccoDescription(tobacco.description) && (
        |                                      ^^^^^^^^^^^^^^^^^^^
    603 |                 <TobaccoDescription>
    604 |                   {getTobaccoDescription(tobacco.description)}
    605 |                 </TobaccoDescription>
ERROR in src/components/Admin/TobaccoCatalog.tsx:604:42
TS2345: Argument of type 'FlexibleText | undefined' is not assignable to parameter of type 'string | { [key: string]: string; } | undefined'.
    602 |               {getTobaccoDescription(tobacco.description) && (
    603 |                 <TobaccoDescription>
  > 604 |                   {getTobaccoDescription(tobacco.description)}
        |                                          ^^^^^^^^^^^^^^^^^^^
    605 |                 </TobaccoDescription>
    606 |               )}
    607 |
ERROR in src/components/Admin/TobaccoCatalog.tsx:659:43
TS2345: Argument of type 'FlexibleText' is not assignable to parameter of type 'string | { [key: string]: string; }'.
    657 |                   fontFamily: 'Aldrich'
    658 |                 }}>
  > 659 |                   <strong>{getTobaccoName(selectedTobacco.name)}</strong> - {selectedTobacco.brand}
        |                                           ^^^^^^^^^^^^^^^^^^^^
    660 |                 </div>
    661 |               </FormGroup>
    662 |
ERROR in src/components/Admin/TobaccoCatalog.tsx:759:37
TS2345: Argument of type 'FlexibleText' is not assignable to parameter of type 'string | { [key: string]: string; }'.
    757 |                 }}>
    758 |                   <strong style={{ color: '#FF41FB' }}>
  > 759 |                     {getTobaccoName(tobaccoToDelete.name)}
        |                                     ^^^^^^^^^^^^^^^^^^^^
    760 |                   </strong>
    761 |                   <br />
    762 |                   <small style={{ color: 'rgba(255, 255, 255, 0.6)' }}>
ERROR in src/components/Common/FormField.tsx:41:13
TS2339: Property 'error' does not exist on type 'ExecutionContext & { hasError?: boolean | undefined; isValid?: boolean | undefined; shouldShowFocusRing?: boolean | undefined; reducedMotion?: boolean | undefined; }'.
    39 |     outline: none;
    40 |     border-color: ${props => 
  > 41 |       props.error ? '#FF6B6B' : '#FF41FB'
       |             ^^^^^
    42 |     };
    43 |     ${props => props.shouldShowFocusRing && css`
    44 |       box-shadow: 0 0 0 3px ${props => 
ERROR in src/components/Common/FormField.tsx:45:15
TS2339: Property 'error' does not exist on type 'ExecutionContext & object'.
    43 |     ${props => props.shouldShowFocusRing && css`
    44 |       box-shadow: 0 0 0 3px ${props => 
  > 45 |         props.error ? 'rgba(255, 107, 107, 0.4)' : 'rgba(255, 65, 251, 0.4)'
       |               ^^^^^
    46 |       };
    47 |       outline: 2px solid transparent;
    48 |       outline-offset: 2px;
ERROR in src/components/Menu/CategoryNavigation.tsx:182:9
TS2322: Type '{ categories: Category[]; activeCategory: string; onCategoryChange: (categoryId: string) => void; language: Language; showIcons: true; scrollable: true; }' is not assignable to type 'IntrinsicAttributes & SubcategoryTabsProps'.
  Property 'showIcons' does not exist on type 'IntrinsicAttributes & SubcategoryTabsProps'.
    180 |         onCategoryChange={onCategoryChange}
    181 |         language={language}
  > 182 |         showIcons
        |         ^^^^^^^^^
    183 |         scrollable
    184 |       />
    185 |     );
ERROR in src/components/Menu/MenuCategories.tsx:217:40
TS2554: Expected 1 arguments, but got 2.
    215 |       mobile={mobile}
    216 |       role="tablist"
  > 217 |       aria-label={t('menu.categories', 'Menu categories')}
        |                                        ^^^^^^^^^^^^^^^^^
    218 |     >
    219 |       <ScreenReaderText>
    220 |         Use arrow keys to navigate between categories, Enter or Space to select
ERROR in src/components/Menu/MenuFilters.tsx:555:11
TS2322: Type '{ value: string; onChange: (query: string) => void; placeholder: string; language: Language; debounceDelay: number; showClear: true; autoFocus: boolean; }' is not assignable to type 'IntrinsicAttributes & SearchBarProps'.
  Property 'placeholder' does not exist on type 'IntrinsicAttributes & SearchBarProps'.
    553 |           value={filters.searchQuery}
    554 |           onChange={handleSearchChange}
  > 555 |           placeholder={searchPlaceholder || getText('search')}
        |           ^^^^^^^^^^^
    556 |           language={language}
    557 |           debounceDelay={searchDebounce}
    558 |           showClear
ERROR in src/components/Menu/MenuHeader.tsx:258:11
TS2322: Type '{ language: Language; setLanguage: (language: Language) => void; variant: string; compact: boolean; showFlags: boolean; }' is not assignable to type 'IntrinsicAttributes'.
  Property 'language' does not exist on type 'IntrinsicAttributes'.
    256 |       <TopBar>
    257 |         <LanguageToggle
  > 258 |           language={language}
        |           ^^^^^^^^
    259 |           setLanguage={onLanguageChange}
    260 |           variant={effectiveIsMobile ? 'buttons' : 'dropdown'}
    261 |           compact={effectiveIsMobile}
ERROR in src/components/Menu/MenuMobileNav.tsx:405:37
TS2345: Argument of type 'string | PartialMultilingualText' is not assignable to parameter of type 'string'.
  Type 'PartialMultilingualText' is not assignable to type 'string'.
    403 |                 <span className="icon">{category.icon}</span>
    404 |                 <span className="label">
  > 405 |                   {getTruncatedName(categoryName, 8)}
        |                                     ^^^^^^^^^^^^
    406 |                 </span>
    407 |               </NavTab>
    408 |             );
ERROR in src/components/Menu/MenuMobileNav.tsx:525:48
TS2322: Type 'string | PartialMultilingualText' is not assignable to type 'ReactI18NextChildren | Iterable<ReactI18NextChildren>'.
  Type 'PartialMultilingualText' is not assignable to type 'ReactI18NextChildren | Iterable<ReactI18NextChildren>'.
    523 |                       >
    524 |                         <span className="icon">{category.icon}</span>
  > 525 |                         <span className="name">{categoryName}</span>
        |                                                ^^^^^^^^^^^^^^
    526 |                       </CategoryCard>
    527 |                     );
    528 |                   })}
ERROR in src/components/Menu/MenuPageContainer.tsx:22:10
TS2614: Module '"./ProductList"' has no exported member 'ProductList'. Did you mean to use 'import ProductList from "./ProductList"' instead?
    20 | import { MenuMobileNav } from './MenuMobileNav';
    21 | import { QRCodeModal } from './QRCodeModal';
  > 22 | import { ProductList } from './ProductList';
       |          ^^^^^^^^^^^
    23 | import { SubcategoryTabs } from './SubcategoryTabs';
    24 | import { Product, Category, MainCategory } from '../../types';
    25 | import productsData from '../../data/products.json';
ERROR in src/components/Menu/MenuPageContainer.tsx:23:10
TS2614: Module '"./SubcategoryTabs"' has no exported member 'SubcategoryTabs'. Did you mean to use 'import SubcategoryTabs from "./SubcategoryTabs"' instead?
    21 | import { QRCodeModal } from './QRCodeModal';
    22 | import { ProductList } from './ProductList';
  > 23 | import { SubcategoryTabs } from './SubcategoryTabs';
       |          ^^^^^^^^^^^^^^^
    24 | import { Product, Category, MainCategory } from '../../types';
    25 | import productsData from '../../data/products.json';
    26 |
ERROR in src/components/Menu/MenuPageContainer.tsx:375:11
TS2322: Type 'Category | undefined' is not assignable to type '{ name: string; icon?: string | undefined; } | undefined'.
  Type 'Category' is not assignable to type '{ name: string; icon?: string | undefined; }'.
    Types of property 'name' are incompatible.
      Type 'FlexibleText' is not assignable to type 'string'.
        Type 'MultilingualText' is not assignable to type 'string'.
    373 |           language={language}
    374 |           onLanguageChange={setLanguage}
  > 375 |           category={menusCategory}
        |           ^^^^^^^^
    376 |         />
    377 |         
    378 |         {/* Product Grid - Same as other categories */}
ERROR in src/components/Menu/MenuPageContainer.tsx:408:11
TS2322: Type '{ name: string; icon: string; description: string | null; } | null' is not assignable to type '{ name: string; icon?: string | undefined; } | undefined'.
  Type 'null' is not assignable to type '{ name: string; icon?: string | undefined; } | undefined'.
    406 |           language={language}
    407 |           onLanguageChange={setLanguage}
  > 408 |           category={currentCategory}
        |           ^^^^^^^^
    409 |         />
    410 |         
    411 |         {/* Filters */}
ERROR in src/components/Menu/MenuPageContainer.tsx:435:11
TS2322: Type '{ mainCategories: { [x: string]: MainCategory; }; categories: Category[]; selectedMainCategory: string; selectedCategory: string; onMainCategoryChange: (mainCategoryId: string) => void; ... 6 more ...; showNavigationHints: true; }' is not assignable to type 'IntrinsicAttributes & CategoryNavigationProps'.
  Property 'enableSwipeNavigation' does not exist on type 'IntrinsicAttributes & CategoryNavigationProps'.
    433 |           showMainCategories={false}
    434 |           showSubcategories
  > 435 |           enableSwipeNavigation
        |           ^^^^^^^^^^^^^^^^^^^^^
    436 |           showNavigationHints
    437 |         />
    438 |         
ERROR in src/components/Menu/MenuPageContainer.tsx:479:9
TS2322: Type 'string | null | undefined' is not assignable to type 'string | undefined'.
  Type 'null' is not assignable to type 'string | undefined'.
    477 |       {/* Background Video */}
    478 |       <VideoBackground 
  > 479 |         category={backgroundCategory}
        |         ^^^^^^^^
    480 |       />
    481 |       
    482 |       {/* QR Code Button */}
ERROR in src/components/Menu/MenuProductCard.tsx:451:16
TS2551: Property 'categoryIcon' does not exist on type 'Product'. Did you mean 'categoryId'?
    449 |       
    450 |       {/* Category icon */}
  > 451 |       {product.categoryIcon && (
        |                ^^^^^^^^^^^^
    452 |         <CategoryIcon>{product.categoryIcon}</CategoryIcon>
    453 |       )}
    454 |       
ERROR in src/components/Menu/MenuProductCard.tsx:452:32
TS2551: Property 'categoryIcon' does not exist on type 'Product'. Did you mean 'categoryId'?
    450 |       {/* Category icon */}
    451 |       {product.categoryIcon && (
  > 452 |         <CategoryIcon>{product.categoryIcon}</CategoryIcon>
        |                                ^^^^^^^^^^^^
    453 |       )}
    454 |       
    455 |       {/* Main content */}
ERROR in src/components/Menu/MenusOverview.tsx:435:32
TS2345: Argument of type 'Category[]' is not assignable to parameter of type 'SetStateAction<Category[]>'.
  Type 'import("/Users/umitgencay/Safira/safira-lounge-menu/src/types/product.types").Category[]' is not assignable to type 'Category[]'.
    Type 'import("/Users/umitgencay/Safira/safira-lounge-menu/src/types/product.types").Category' is not assignable to type 'Category'.
      Types of property 'name' are incompatible.
        Type 'FlexibleText' is not assignable to type 'string | { [key: string]: string; }'.
          Type 'MultilingualText' is not assignable to type 'string | { [key: string]: string; }'.
            Type 'MultilingualText' is not assignable to type '{ [key: string]: string; }'.
              Index signature for type 'string' is missing in type 'MultilingualText'.
    433 |       try {
    434 |         const data = await getProducts();
  > 435 |         setAvailableCategories(data.categories || []);
        |                                ^^^^^^^^^^^^^^^^^^^^^
    436 |       } catch (error) {
    437 |         console.error('Failed to load products, using fallback data:', error);
    438 |         setAvailableCategories(productsData.categories as Category[]);
ERROR in src/components/Menu/OptimizedMenuProductCard.tsx:476:29
TS2339: Property 'image' does not exist on type 'Product'.
    474 |       
    475 |       {/* Product image */}
  > 476 |       {showImage && product.image && (
        |                             ^^^^^
    477 |         <ProductImageContainer>
    478 |           <LazyImage
    479 |             src={product.image}
ERROR in src/components/Menu/OptimizedMenuProductCard.tsx:479:26
TS2339: Property 'image' does not exist on type 'Product'.
    477 |         <ProductImageContainer>
    478 |           <LazyImage
  > 479 |             src={product.image}
        |                          ^^^^^
    480 |             alt={productName}
    481 |             width="100%"
    482 |             height="200px"
ERROR in src/components/Menu/OptimizedMenuProductCard.tsx:562:32
TS2339: Property 'image' does not exist on type 'Product'.
    560 |       badges: prevProps.product.badges,
    561 |       available: prevProps.product.available,
  > 562 |       image: prevProps.product.image
        |                                ^^^^^
    563 |     }) === JSON.stringify({
    564 |       name: nextProps.product.name,
    565 |       description: nextProps.product.description,
ERROR in src/components/Menu/OptimizedMenuProductCard.tsx:571:32
TS2339: Property 'image' does not exist on type 'Product'.
    569 |       badges: nextProps.product.badges,
    570 |       available: nextProps.product.available,
  > 571 |       image: nextProps.product.image
        |                                ^^^^^
    572 |     })
    573 |   );
    574 | });
ERROR in src/hooks/useBulkOperations.ts:68:7
TS2322: Type '{ message: string; updatedCount: number; newPrice: number; }' is not assignable to type 'BulkPriceUpdateResult'.
    66 |       
    67 |       setProgress(100);
  > 68 |       return result;
       |       ^^^^^^^^^^^^^^
    69 |     } catch (error) {
    70 |       console.error('Bulk price update failed:', error);
    71 |       setError('Failed to update prices');
ERROR in src/hooks/useBulkOperations.ts:249:26
TS2345: Argument of type '"bulk_export"' is not assignable to parameter of type 'AnalyticsEventType'.
    247 |       // Track export
    248 |       try {
  > 249 |         await trackEvent('bulk_export', {
        |                          ^^^^^^^^^^^^^
    250 |           format,
    251 |           productCount: products.length,
    252 |           description: `Exported ${products.length} products to ${format.toUpperCase()}`
ERROR in src/hooks/useCategories.ts:81:5
TS2322: Type '(nameObj: FlexibleText, lang?: string) => string | PartialMultilingualText' is not assignable to type '(nameObj: FlexibleText, language?: string | undefined) => string'.
  Type 'string | PartialMultilingualText' is not assignable to type 'string'.
    Type 'PartialMultilingualText' is not assignable to type 'string'.
    79 |     error,
    80 |     loadCategories,
  > 81 |     getCategoryName,
       |     ^^^^^^^^^^^^^^^
    82 |     getCategoryById,
    83 |     getProductCountByCategory
    84 |   };
ERROR in src/hooks/useMenuNavigation.ts:187:5
TS2322: Type '() => { name: string | PartialMultilingualText; icon: string; description: null; } | null' is not assignable to type '() => { name: string; icon: string; description: string | null; } | null'.
  Type '{ name: string | PartialMultilingualText; icon: string; description: null; } | null' is not assignable to type '{ name: string; icon: string; description: string | null; } | null'.
    Type '{ name: string | PartialMultilingualText; icon: string; description: null; }' is not assignable to type '{ name: string; icon: string; description: string | null; }'.
      Types of property 'name' are incompatible.
        Type 'string | PartialMultilingualText' is not assignable to type 'string'.
          Type 'PartialMultilingualText' is not assignable to type 'string'.
    185 |     handleBack,
    186 |     resetToMainMenu,
  > 187 |     getCurrentCategory,
        |     ^^^^^^^^^^^^^^^^^^
    188 |     getCurrentCategories
    189 |   };
    190 | }
ERROR in src/hooks/useProductForm.ts:69:21
TS2345: Argument of type '(prev: ProductFormValidation) => { errors: { [x: string]: string | undefined; }; isValid: boolean; }' is not assignable to parameter of type 'SetStateAction<ProductFormValidation>'.
  Type '(prev: ProductFormValidation) => { errors: { [x: string]: string | undefined; }; isValid: boolean; }' is not assignable to type '(prevState: ProductFormValidation) => ProductFormValidation'.
    Call signature return types '{ errors: { [x: string]: string | undefined; }; isValid: boolean; }' and 'ProductFormValidation' are incompatible.
      The types of 'errors' are incompatible between these types.
        Type '{ [x: string]: string | undefined; }' is not assignable to type 'Record<string, string>'.
          'string' index signatures are incompatible.
            Type 'string | undefined' is not assignable to type 'string'.
              Type 'undefined' is not assignable to type 'string'.
    67 |     // Clear validation error for this field
    68 |     if (validation.errors[field]) {
  > 69 |       setValidation(prev => ({
       |                     ^^^^^^^^^^
  > 70 |         ...prev,
       | ^^^^^^^^^^^^^^^^
  > 71 |         errors: { ...prev.errors, [field]: undefined }
       | ^^^^^^^^^^^^^^^^
  > 72 |       }));
       | ^^^^^^^^^
    73 |     }
    74 |   }, [validation.errors]);
    75 |
ERROR in src/hooks/useProducts.ts:241:7
TS2739: Type '{ message: string; updatedCount: number; newPrice: number; }' is missing the following properties from type 'BulkPriceUpdateResult': processedCount, successCount, failureCount
    239 |       const result = await bulkUpdateTobaccoPrice(categoryId, newPrice);
    240 |       await loadProducts(); // Reload to get fresh data
  > 241 |       return result;
        |       ^^^^^^^^^^^^^^
    242 |     } catch (error) {
    243 |       console.error('Failed to bulk update prices:', error);
    244 |       setError('Failed to update prices');
ERROR in src/hooks/useVirtualScroll.ts:312:20
TS2352: Conversion of type '{ target: HTMLElement; }' to type 'Event' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ target: HTMLElement; }' is missing the following properties from type 'Event': bubbles, cancelBubble, cancelable, composed, and 17 more.
    310 |         ? scrollElementRef.current.scrollLeft 
    311 |         : scrollElementRef.current.scrollTop;
  > 312 |       handleScroll({ target: scrollElementRef.current } as Event);
        |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    313 |     }
    314 |   }, [horizontal, handleScroll]);
    315 |
ERROR in src/tests/accessibility.test.ts
TS1161: Unterminated regular expression literal.
ERROR in src/tests/accessibility.test.ts:7:41
TS2307: Cannot find module 'jest-axe' or its corresponding type declarations.
     5 |
     6 | import { render, screen, fireEvent, waitFor } from '@testing-library/react';
  >  7 | import { axe, toHaveNoViolations } from 'jest-axe';
       |                                         ^^^^^^^^^^
     8 | import React from 'react';
     9 | import { validationUtils, colorUtils, touchUtils } from '../utils/accessibility';
    10 | import AccessibleButton from '../components/Common/AccessibleButton';
ERROR in src/tests/accessibility.test.ts:107:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    105 |     test('renders without accessibility violations', async () => {
    106 |       const { container } = render(
  > 107 |         <AccessibleButton>Test Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    108 |       );
    109 |       
    110 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:107:27
TS2304: Cannot find name 'Test'.
    105 |     test('renders without accessibility violations', async () => {
    106 |       const { container } = render(
  > 107 |         <AccessibleButton>Test Button</AccessibleButton>
        |                           ^^^^
    108 |       );
    109 |       
    110 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:107:32
TS1005: ',' expected.
    105 |     test('renders without accessibility violations', async () => {
    106 |       const { container } = render(
  > 107 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^
    108 |       );
    109 |       
    110 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:107:32
TS2304: Cannot find name 'Button'.
    105 |     test('renders without accessibility violations', async () => {
    106 |       const { container } = render(
  > 107 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^
    108 |       );
    109 |       
    110 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:107:32
TS2769: No overload matches this call.
  Overload 1 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options: RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>'.
  Overload 2 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options?: Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries"> | undefined): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries">'.
    105 |     test('renders without accessibility violations', async () => {
    106 |       const { container } = render(
  > 107 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^^^^^^^^^^^^^^^^^^^^
    108 |       );
    109 |       
    110 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:117:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:27
TS1005: '>' expected.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                           ^^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:27
TS2304: Cannot find name 'onClick'.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                           ^^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:34
TS1005: ',' expected.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                                  ^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:49
TS2304: Cannot find name 'Test'.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                                                 ^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:54
TS1005: ',' expected.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                                                      ^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:54
TS2304: Cannot find name 'Button'.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                                                      ^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:117:54
TS2554: Expected 1-2 arguments, but got 3.
    115 |       const handleClick = jest.fn();
    116 |       render(
  > 117 |         <AccessibleButton onClick={handleClick}>Test Button</AccessibleButton>
        |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
    118 |       );
    119 |       
    120 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:127:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:27
TS1005: '>' expected.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                           ^^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:27
TS2304: Cannot find name 'loading'.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                           ^^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:34
TS1005: ',' expected.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                  ^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:41
TS1005: ':' expected.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                         ^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:43
TS2304: Cannot find name 'Test'.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                           ^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:48
TS1005: ',' expected.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                                ^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:48
TS2304: Cannot find name 'Button'.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                                ^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:127:48
TS2554: Expected 1-2 arguments, but got 3.
    125 |     test('announces loading state', () => {
    126 |       const { rerender } = render(
  > 127 |         <AccessibleButton loading={false}>Test Button</AccessibleButton>
        |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
    128 |       );
    129 |       
    130 |       rerender(
ERROR in src/tests/accessibility.test.ts:131:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |          ^^^^^^^^^^^^^^^^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:27
TS1005: '>' expected.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                           ^^^^^^^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:27
TS2304: Cannot find name 'loading'.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                           ^^^^^^^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:34
TS1005: ',' expected.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                                  ^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:35
TS2554: Expected 1 arguments, but got 4.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 132 |           Test Button
        | ^^^^^^^^^^^^^^^^^^^^^
  > 133 |         </AccessibleButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    134 |       );
    135 |       
    136 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:131:40
TS1005: ':' expected.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                                        ^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:42
TS1005: ',' expected.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                                          ^^^^^^^^^^^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:131:42
TS2304: Cannot find name 'loadingText'.
    129 |       
    130 |       rerender(
  > 131 |         <AccessibleButton loading={true} loadingText="Loading data">
        |                                          ^^^^^^^^^^^
    132 |           Test Button
    133 |         </AccessibleButton>
    134 |       );
ERROR in src/tests/accessibility.test.ts:132:11
TS2304: Cannot find name 'Test'.
    130 |       rerender(
    131 |         <AccessibleButton loading={true} loadingText="Loading data">
  > 132 |           Test Button
        |           ^^^^
    133 |         </AccessibleButton>
    134 |       );
    135 |       
ERROR in src/tests/accessibility.test.ts:132:16
TS1005: ',' expected.
    130 |       rerender(
    131 |         <AccessibleButton loading={true} loadingText="Loading data">
  > 132 |           Test Button
        |                ^^^^^^
    133 |         </AccessibleButton>
    134 |       );
    135 |       
ERROR in src/tests/accessibility.test.ts:132:16
TS2304: Cannot find name 'Button'.
    130 |       rerender(
    131 |         <AccessibleButton loading={true} loadingText="Loading data">
  > 132 |           Test Button
        |                ^^^^^^
    133 |         </AccessibleButton>
    134 |       );
    135 |       
ERROR in src/tests/accessibility.test.ts:142:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    140 |     test('supports icon-only buttons with proper labels', () => {
    141 |       render(
  > 142 |         <AccessibleButton 
        |          ^^^^^^^^^^^^^^^^
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
ERROR in src/tests/accessibility.test.ts:143:11
TS1005: '>' expected.
    141 |       render(
    142 |         <AccessibleButton 
  > 143 |           iconOnly={true}
        |           ^^^^^^^^
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
    146 |         />
ERROR in src/tests/accessibility.test.ts:143:11
TS2304: Cannot find name 'iconOnly'.
    141 |       render(
    142 |         <AccessibleButton 
  > 143 |           iconOnly={true}
        |           ^^^^^^^^
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
    146 |         />
ERROR in src/tests/accessibility.test.ts:143:19
TS1005: ',' expected.
    141 |       render(
    142 |         <AccessibleButton 
  > 143 |           iconOnly={true}
        |                   ^
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
    146 |         />
ERROR in src/tests/accessibility.test.ts:143:25
TS1005: ':' expected.
    141 |       render(
    142 |         <AccessibleButton 
  > 143 |           iconOnly={true}
        |                         ^
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
    146 |         />
ERROR in src/tests/accessibility.test.ts:144:11
TS1005: ',' expected.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |           ^^^^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:144:11
TS2304: Cannot find name 'icon'.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |           ^^^^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:144:11
TS2554: Expected 1-2 arguments, but got 6.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |           ^^^^^^^^^^^^^^^^^^^^^^
  > 145 |           aria-label="Search"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 146 |         />
        | ^^^^^^^^^^^
    147 |       );
    148 |       
    149 |       const button = screen.getByLabelText('Search');
ERROR in src/tests/accessibility.test.ts:144:17
TS1136: Property assignment expected.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |                 ^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:144:18
TS2635: Type '{}' has no signatures for which the type argument list is applicable.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |                  ^^^^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:144:23
TS1127: Invalid character.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |                       ^^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:144:26
TS1110: Type expected.
    142 |         <AccessibleButton 
    143 |           iconOnly={true}
  > 144 |           icon={<span>🔍</span>}
        |                          ^
    145 |           aria-label="Search"
    146 |         />
    147 |       );
ERROR in src/tests/accessibility.test.ts:145:11
TS1005: ',' expected.
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
  > 145 |           aria-label="Search"
        |           ^^^^
    146 |         />
    147 |       );
    148 |       
ERROR in src/tests/accessibility.test.ts:145:11
TS2304: Cannot find name 'aria'.
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
  > 145 |           aria-label="Search"
        |           ^^^^
    146 |         />
    147 |       );
    148 |       
ERROR in src/tests/accessibility.test.ts:145:16
TS2304: Cannot find name 'label'.
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
  > 145 |           aria-label="Search"
        |                ^^^^^
    146 |         />
    147 |       );
    148 |       
ERROR in src/tests/accessibility.test.ts:145:21
TS1005: ',' expected.
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
  > 145 |           aria-label="Search"
        |                     ^
    146 |         />
    147 |       );
    148 |       
ERROR in src/tests/accessibility.test.ts:145:22
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    143 |           iconOnly={true}
    144 |           icon={<span>🔍</span>}
  > 145 |           aria-label="Search"
        |                      ^^^^^^^^
    146 |         />
    147 |       );
    148 |       
ERROR in src/tests/accessibility.test.ts:146:10
TS1109: Expression expected.
    144 |           icon={<span>🔍</span>}
    145 |           aria-label="Search"
  > 146 |         />
        |          ^
    147 |       );
    148 |       
    149 |       const button = screen.getByLabelText('Search');
ERROR in src/tests/accessibility.test.ts:147:7
TS1109: Expression expected.
    145 |           aria-label="Search"
    146 |         />
  > 147 |       );
        |       ^
    148 |       
    149 |       const button = screen.getByLabelText('Search');
    150 |       expect(button).toBeInTheDocument();
ERROR in src/tests/accessibility.test.ts:157:10
TS2749: 'FormField' refers to a value, but is being used as a type here. Did you mean 'typeof FormField'?
    155 |     test('renders without accessibility violations', async () => {
    156 |       const { container } = render(
  > 157 |         <FormField 
        |          ^^^^^^^^^
    158 |           name="test"
    159 |           label="Test Field"
    160 |           value=""
ERROR in src/tests/accessibility.test.ts:158:11
TS1005: '>' expected.
    156 |       const { container } = render(
    157 |         <FormField 
  > 158 |           name="test"
        |           ^^^^
    159 |           label="Test Field"
    160 |           value=""
    161 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:158:15
TS1005: ',' expected.
    156 |       const { container } = render(
    157 |         <FormField 
  > 158 |           name="test"
        |               ^
    159 |           label="Test Field"
    160 |           value=""
    161 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:159:11
TS1005: ',' expected.
    157 |         <FormField 
    158 |           name="test"
  > 159 |           label="Test Field"
        |           ^^^^^
    160 |           value=""
    161 |           onChange={() => {}}
    162 |         />
ERROR in src/tests/accessibility.test.ts:159:11
TS2304: Cannot find name 'label'.
    157 |         <FormField 
    158 |           name="test"
  > 159 |           label="Test Field"
        |           ^^^^^
    160 |           value=""
    161 |           onChange={() => {}}
    162 |         />
ERROR in src/tests/accessibility.test.ts:159:11
TS2554: Expected 1-2 arguments, but got 5.
    157 |         <FormField 
    158 |           name="test"
  > 159 |           label="Test Field"
        |           ^^^^^^^^^^^^^^^^^^
  > 160 |           value=""
        | ^^^^^^^^^^^^^^^^^^
  > 161 |           onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:160:11
TS1005: ',' expected.
    158 |           name="test"
    159 |           label="Test Field"
  > 160 |           value=""
        |           ^^^^^
    161 |           onChange={() => {}}
    162 |         />
    163 |       );
ERROR in src/tests/accessibility.test.ts:160:11
TS2304: Cannot find name 'value'.
    158 |           name="test"
    159 |           label="Test Field"
  > 160 |           value=""
        |           ^^^^^
    161 |           onChange={() => {}}
    162 |         />
    163 |       );
ERROR in src/tests/accessibility.test.ts:161:11
TS1005: ',' expected.
    159 |           label="Test Field"
    160 |           value=""
  > 161 |           onChange={() => {}}
        |           ^^^^^^^^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:161:11
TS2304: Cannot find name 'onChange'.
    159 |           label="Test Field"
    160 |           value=""
  > 161 |           onChange={() => {}}
        |           ^^^^^^^^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:161:20
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    159 |           label="Test Field"
    160 |           value=""
  > 161 |           onChange={() => {}}
        |                    ^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:161:21
TS1136: Property assignment expected.
    159 |           label="Test Field"
    160 |           value=""
  > 161 |           onChange={() => {}}
        |                     ^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:161:24
TS1005: ',' expected.
    159 |           label="Test Field"
    160 |           value=""
  > 161 |           onChange={() => {}}
        |                        ^^
    162 |         />
    163 |       );
    164 |       
ERROR in src/tests/accessibility.test.ts:162:9
TS1005: ',' expected.
    160 |           value=""
    161 |           onChange={() => {}}
  > 162 |         />
        |         ^
    163 |       );
    164 |       
    165 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:162:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    160 |           value=""
    161 |           onChange={() => {}}
  > 162 |         />
        |         ^^
    163 |       );
    164 |       
    165 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:165:33
TS2304: Cannot find name 'container'.
    163 |       );
    164 |       
  > 165 |       const results = await axe(container);
        |                                 ^^^^^^^^^
    166 |       expect(results).toHaveNoViolations();
    167 |     });
    168 |     
ERROR in src/tests/accessibility.test.ts:171:10
TS2749: 'FormField' refers to a value, but is being used as a type here. Did you mean 'typeof FormField'?
    169 |     test('associates labels with form controls', () => {
    170 |       render(
  > 171 |         <FormField 
        |          ^^^^^^^^^
    172 |           name="test"
    173 |           label="Test Field"
    174 |           value=""
ERROR in src/tests/accessibility.test.ts:172:11
TS1005: '>' expected.
    170 |       render(
    171 |         <FormField 
  > 172 |           name="test"
        |           ^^^^
    173 |           label="Test Field"
    174 |           value=""
    175 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:172:15
TS1005: ',' expected.
    170 |       render(
    171 |         <FormField 
  > 172 |           name="test"
        |               ^
    173 |           label="Test Field"
    174 |           value=""
    175 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:173:11
TS1005: ',' expected.
    171 |         <FormField 
    172 |           name="test"
  > 173 |           label="Test Field"
        |           ^^^^^
    174 |           value=""
    175 |           onChange={() => {}}
    176 |         />
ERROR in src/tests/accessibility.test.ts:173:11
TS2304: Cannot find name 'label'.
    171 |         <FormField 
    172 |           name="test"
  > 173 |           label="Test Field"
        |           ^^^^^
    174 |           value=""
    175 |           onChange={() => {}}
    176 |         />
ERROR in src/tests/accessibility.test.ts:173:11
TS2554: Expected 1-2 arguments, but got 6.
    171 |         <FormField 
    172 |           name="test"
  > 173 |           label="Test Field"
        |           ^^^^^^^^^^^^^^^^^^
  > 174 |           value=""
        | ^^^^^^^^^^^^^^^^^^
  > 175 |           onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:174:11
TS1005: ',' expected.
    172 |           name="test"
    173 |           label="Test Field"
  > 174 |           value=""
        |           ^^^^^
    175 |           onChange={() => {}}
    176 |         />
    177 |       );
ERROR in src/tests/accessibility.test.ts:174:11
TS2304: Cannot find name 'value'.
    172 |           name="test"
    173 |           label="Test Field"
  > 174 |           value=""
        |           ^^^^^
    175 |           onChange={() => {}}
    176 |         />
    177 |       );
ERROR in src/tests/accessibility.test.ts:175:11
TS1005: ',' expected.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |           ^^^^^^^^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:175:11
TS2304: Cannot find name 'onChange'.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |           ^^^^^^^^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:175:20
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |                    ^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:175:21
TS1136: Property assignment expected.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |                     ^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:175:24
TS1005: ',' expected.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |                        ^^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:175:29
TS1005: ',' expected.
    173 |           label="Test Field"
    174 |           value=""
  > 175 |           onChange={() => {}}
        |                             ^
    176 |         />
    177 |       );
    178 |       
ERROR in src/tests/accessibility.test.ts:176:9
TS1005: ',' expected.
    174 |           value=""
    175 |           onChange={() => {}}
  > 176 |         />
        |         ^
    177 |       );
    178 |       
    179 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:176:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    174 |           value=""
    175 |           onChange={() => {}}
  > 176 |         />
        |         ^^
    177 |       );
    178 |       
    179 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:185:10
TS2749: 'FormField' refers to a value, but is being used as a type here. Did you mean 'typeof FormField'?
    183 |     test('announces validation errors', () => {
    184 |       render(
  > 185 |         <FormField 
        |          ^^^^^^^^^
    186 |           name="test"
    187 |           label="Test Field"
    188 |           value=""
ERROR in src/tests/accessibility.test.ts:186:11
TS1005: '>' expected.
    184 |       render(
    185 |         <FormField 
  > 186 |           name="test"
        |           ^^^^
    187 |           label="Test Field"
    188 |           value=""
    189 |           error="This field is required"
ERROR in src/tests/accessibility.test.ts:186:15
TS1005: ',' expected.
    184 |       render(
    185 |         <FormField 
  > 186 |           name="test"
        |               ^
    187 |           label="Test Field"
    188 |           value=""
    189 |           error="This field is required"
ERROR in src/tests/accessibility.test.ts:187:11
TS1005: ',' expected.
    185 |         <FormField 
    186 |           name="test"
  > 187 |           label="Test Field"
        |           ^^^^^
    188 |           value=""
    189 |           error="This field is required"
    190 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:187:11
TS2552: Cannot find name 'label'. Did you mean 'babel'?
    185 |         <FormField 
    186 |           name="test"
  > 187 |           label="Test Field"
        |           ^^^^^
    188 |           value=""
    189 |           error="This field is required"
    190 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:187:11
TS2554: Expected 1-2 arguments, but got 7.
    185 |         <FormField 
    186 |           name="test"
  > 187 |           label="Test Field"
        |           ^^^^^^^^^^^^^^^^^^
  > 188 |           value=""
        | ^^^^^^^^^^^^^^^^^^
  > 189 |           error="This field is required"
        | ^^^^^^^^^^^^^^^^^^
  > 190 |           onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:188:11
TS1005: ',' expected.
    186 |           name="test"
    187 |           label="Test Field"
  > 188 |           value=""
        |           ^^^^^
    189 |           error="This field is required"
    190 |           onChange={() => {}}
    191 |         />
ERROR in src/tests/accessibility.test.ts:188:11
TS2304: Cannot find name 'value'.
    186 |           name="test"
    187 |           label="Test Field"
  > 188 |           value=""
        |           ^^^^^
    189 |           error="This field is required"
    190 |           onChange={() => {}}
    191 |         />
ERROR in src/tests/accessibility.test.ts:189:11
TS1005: ',' expected.
    187 |           label="Test Field"
    188 |           value=""
  > 189 |           error="This field is required"
        |           ^^^^^
    190 |           onChange={() => {}}
    191 |         />
    192 |       );
ERROR in src/tests/accessibility.test.ts:189:11
TS2552: Cannot find name 'error'. Did you mean 'Error'?
    187 |           label="Test Field"
    188 |           value=""
  > 189 |           error="This field is required"
        |           ^^^^^
    190 |           onChange={() => {}}
    191 |         />
    192 |       );
ERROR in src/tests/accessibility.test.ts:190:11
TS1005: ',' expected.
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |           ^^^^^^^^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:190:11
TS2552: Cannot find name 'onChange'. Did you mean 'onchange'?
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |           ^^^^^^^^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:190:20
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |                    ^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:190:21
TS1136: Property assignment expected.
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |                     ^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:190:24
TS1005: ',' expected.
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |                        ^^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:190:29
TS1005: ',' expected.
    188 |           value=""
    189 |           error="This field is required"
  > 190 |           onChange={() => {}}
        |                             ^
    191 |         />
    192 |       );
    193 |       
ERROR in src/tests/accessibility.test.ts:191:9
TS1005: ',' expected.
    189 |           error="This field is required"
    190 |           onChange={() => {}}
  > 191 |         />
        |         ^
    192 |       );
    193 |       
    194 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:191:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    189 |           error="This field is required"
    190 |           onChange={() => {}}
  > 191 |         />
        |         ^^
    192 |       );
    193 |       
    194 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:194:13
TS2451: Cannot redeclare block-scoped variable 'input'.
    192 |       );
    193 |       
  > 194 |       const input = screen.getByLabelText('Test Field');
        |             ^^^^^
    195 |       expect(input).toHaveAttribute('aria-invalid', 'true');
    196 |       
    197 |       const errorMessage = screen.getByRole('alert');
ERROR in src/tests/accessibility.test.ts:199:5
TS1128: Declaration or statement expected.
    197 |       const errorMessage = screen.getByRole('alert');
    198 |       expect(errorMessage).toHaveTextContent('This field is required');
  > 199 |     });
        |     ^
    200 |     
    201 |     test('supports required field indication', () => {
    202 |       render(
ERROR in src/tests/accessibility.test.ts:199:6
TS1128: Declaration or statement expected.
    197 |       const errorMessage = screen.getByRole('alert');
    198 |       expect(errorMessage).toHaveTextContent('This field is required');
  > 199 |     });
        |      ^
    200 |     
    201 |     test('supports required field indication', () => {
    202 |       render(
ERROR in src/tests/accessibility.test.ts:203:10
TS2749: 'FormField' refers to a value, but is being used as a type here. Did you mean 'typeof FormField'?
    201 |     test('supports required field indication', () => {
    202 |       render(
  > 203 |         <FormField 
        |          ^^^^^^^^^
    204 |           name="test"
    205 |           label="Test Field"
    206 |           value=""
ERROR in src/tests/accessibility.test.ts:204:11
TS1005: '>' expected.
    202 |       render(
    203 |         <FormField 
  > 204 |           name="test"
        |           ^^^^
    205 |           label="Test Field"
    206 |           value=""
    207 |           required={true}
ERROR in src/tests/accessibility.test.ts:204:15
TS1005: ',' expected.
    202 |       render(
    203 |         <FormField 
  > 204 |           name="test"
        |               ^
    205 |           label="Test Field"
    206 |           value=""
    207 |           required={true}
ERROR in src/tests/accessibility.test.ts:205:11
TS1005: ',' expected.
    203 |         <FormField 
    204 |           name="test"
  > 205 |           label="Test Field"
        |           ^^^^^
    206 |           value=""
    207 |           required={true}
    208 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:205:11
TS2552: Cannot find name 'label'. Did you mean 'babel'?
    203 |         <FormField 
    204 |           name="test"
  > 205 |           label="Test Field"
        |           ^^^^^
    206 |           value=""
    207 |           required={true}
    208 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:205:11
TS2554: Expected 1-2 arguments, but got 7.
    203 |         <FormField 
    204 |           name="test"
  > 205 |           label="Test Field"
        |           ^^^^^^^^^^^^^^^^^^
  > 206 |           value=""
        | ^^^^^^^^^^^^^^^^^^
  > 207 |           required={true}
        | ^^^^^^^^^^^^^^^^^^
  > 208 |           onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:206:11
TS1005: ',' expected.
    204 |           name="test"
    205 |           label="Test Field"
  > 206 |           value=""
        |           ^^^^^
    207 |           required={true}
    208 |           onChange={() => {}}
    209 |         />
ERROR in src/tests/accessibility.test.ts:206:11
TS2304: Cannot find name 'value'.
    204 |           name="test"
    205 |           label="Test Field"
  > 206 |           value=""
        |           ^^^^^
    207 |           required={true}
    208 |           onChange={() => {}}
    209 |         />
ERROR in src/tests/accessibility.test.ts:207:11
TS1005: ',' expected.
    205 |           label="Test Field"
    206 |           value=""
  > 207 |           required={true}
        |           ^^^^^^^^
    208 |           onChange={() => {}}
    209 |         />
    210 |       );
ERROR in src/tests/accessibility.test.ts:207:11
TS2552: Cannot find name 'required'. Did you mean 'require'?
    205 |           label="Test Field"
    206 |           value=""
  > 207 |           required={true}
        |           ^^^^^^^^
    208 |           onChange={() => {}}
    209 |         />
    210 |       );
ERROR in src/tests/accessibility.test.ts:207:25
TS1005: ':' expected.
    205 |           label="Test Field"
    206 |           value=""
  > 207 |           required={true}
        |                         ^
    208 |           onChange={() => {}}
    209 |         />
    210 |       );
ERROR in src/tests/accessibility.test.ts:208:11
TS1005: ',' expected.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |           ^^^^^^^^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:208:11
TS2304: Cannot find name 'onChange'.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |           ^^^^^^^^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:208:20
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |                    ^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:208:21
TS1136: Property assignment expected.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |                     ^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:208:24
TS1005: ',' expected.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |                        ^^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:208:29
TS1005: ',' expected.
    206 |           value=""
    207 |           required={true}
  > 208 |           onChange={() => {}}
        |                             ^
    209 |         />
    210 |       );
    211 |       
ERROR in src/tests/accessibility.test.ts:209:9
TS1005: ',' expected.
    207 |           required={true}
    208 |           onChange={() => {}}
  > 209 |         />
        |         ^
    210 |       );
    211 |       
    212 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:209:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    207 |           required={true}
    208 |           onChange={() => {}}
  > 209 |         />
        |         ^^
    210 |       );
    211 |       
    212 |       const input = screen.getByLabelText('Test Field');
ERROR in src/tests/accessibility.test.ts:212:13
TS2451: Cannot redeclare block-scoped variable 'input'.
    210 |       );
    211 |       
  > 212 |       const input = screen.getByLabelText('Test Field');
        |             ^^^^^
    213 |       expect(input).toHaveAttribute('aria-required', 'true');
    214 |       expect(input).toBeRequired();
    215 |     });
ERROR in src/tests/accessibility.test.ts:215:5
TS1128: Declaration or statement expected.
    213 |       expect(input).toHaveAttribute('aria-required', 'true');
    214 |       expect(input).toBeRequired();
  > 215 |     });
        |     ^
    216 |   });
    217 |   
    218 |   describe('SkipLink Component Tests', () => {
ERROR in src/tests/accessibility.test.ts:215:6
TS1128: Declaration or statement expected.
    213 |       expect(input).toHaveAttribute('aria-required', 'true');
    214 |       expect(input).toBeRequired();
  > 215 |     });
        |      ^
    216 |   });
    217 |   
    218 |   describe('SkipLink Component Tests', () => {
ERROR in src/tests/accessibility.test.ts:216:3
TS1128: Declaration or statement expected.
    214 |       expect(input).toBeRequired();
    215 |     });
  > 216 |   });
        |   ^
    217 |   
    218 |   describe('SkipLink Component Tests', () => {
    219 |     test('renders without accessibility violations', async () => {
ERROR in src/tests/accessibility.test.ts:216:4
TS1128: Declaration or statement expected.
    214 |       expect(input).toBeRequired();
    215 |     });
  > 216 |   });
        |    ^
    217 |   
    218 |   describe('SkipLink Component Tests', () => {
    219 |     test('renders without accessibility violations', async () => {
ERROR in src/tests/accessibility.test.ts:221:10
TS2749: 'SkipLink' refers to a value, but is being used as a type here. Did you mean 'typeof SkipLink'?
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |          ^^^^^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:19
TS1005: '>' expected.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:19
TS2304: Cannot find name 'href'.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:23
TS1005: ',' expected.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                       ^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:39
TS2304: Cannot find name 'Skip'.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                       ^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:44
TS1005: ',' expected.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:44
TS2304: Cannot find name 'to'.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:44
TS2554: Expected 1-2 arguments, but got 5.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:47
TS1005: ',' expected.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:47
TS2304: Cannot find name 'main'.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:52
TS1005: ',' expected.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:221:52
TS2304: Cannot find name 'content'.
    219 |     test('renders without accessibility violations', async () => {
    220 |       const { container } = render(
  > 221 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    222 |       );
    223 |       
    224 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:230:10
TS2749: 'SkipLink' refers to a value, but is being used as a type here. Did you mean 'typeof SkipLink'?
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |          ^^^^^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:19
TS1005: '>' expected.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:19
TS2304: Cannot find name 'href'.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:23
TS1005: ',' expected.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                       ^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:39
TS2304: Cannot find name 'Skip'.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                       ^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:44
TS1005: ',' expected.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:44
TS2304: Cannot find name 'to'.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:44
TS2554: Expected 1-2 arguments, but got 5.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:47
TS1005: ',' expected.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:47
TS2304: Cannot find name 'main'.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:52
TS1005: ',' expected.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:230:52
TS2304: Cannot find name 'content'.
    228 |     test('becomes visible on focus', () => {
    229 |       render(
  > 230 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    231 |       );
    232 |       
    233 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:10
TS2749: 'SkipLink' refers to a value, but is being used as a type here. Did you mean 'typeof SkipLink'?
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |          ^^^^^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:19
TS1005: '>' expected.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:19
TS2304: Cannot find name 'href'.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                   ^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:23
TS1005: ',' expected.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                       ^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:39
TS2304: Cannot find name 'Skip'.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                       ^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:44
TS1005: ',' expected.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:44
TS2304: Cannot find name 'to'.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:44
TS2554: Expected 1-2 arguments, but got 5.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:47
TS1005: ',' expected.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:47
TS2304: Cannot find name 'main'.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                               ^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:52
TS1005: ',' expected.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:246:52
TS2304: Cannot find name 'content'.
    244 |       
    245 |       render(
  > 246 |         <SkipLink href="main-content">Skip to main content</SkipLink>
        |                                                    ^^^^^^^
    247 |       );
    248 |       
    249 |       const link = screen.getByText('Skip to main content');
ERROR in src/tests/accessibility.test.ts:261:10
TS2749: 'LiveRegion' refers to a value, but is being used as a type here. Did you mean 'typeof LiveRegion'?
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |          ^^^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:21
TS1005: '>' expected.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                     ^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:21
TS2304: Cannot find name 'priority'.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                     ^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:29
TS1005: ',' expected.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                             ^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:39
TS2304: Cannot find name 'Test'.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                                       ^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:44
TS1005: ',' expected.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                                            ^^^^^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:44
TS2304: Cannot find name 'announcement'.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                                            ^^^^^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:261:44
TS2554: Expected 1-2 arguments, but got 3.
    259 |     test('renders without accessibility violations', async () => {
    260 |       const { container } = render(
  > 261 |         <LiveRegion priority="polite">Test announcement</LiveRegion>
        |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
    262 |       );
    263 |       
    264 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:270:10
TS2749: 'LiveRegion' refers to a value, but is being used as a type here. Did you mean 'typeof LiveRegion'?
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |          ^^^^^^^^^^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:21
TS1005: '>' expected.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                     ^^^^^^^^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:21
TS2304: Cannot find name 'priority'.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                     ^^^^^^^^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:29
TS1005: ',' expected.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                             ^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:42
TS1005: ',' expected.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                                          ^^^^^^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:42
TS2304: Cannot find name 'atomic'.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                                          ^^^^^^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:270:42
TS2554: Expected 1-2 arguments, but got 4.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                                          ^^^^^^^^^^^^^^
  > 271 |           Test announcement
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 272 |         </LiveRegion>
        | ^^^^^^^^^^^^^^^^^^^^^^
    273 |       );
    274 |       
    275 |       const liveRegion = container.querySelector('[aria-live]');
ERROR in src/tests/accessibility.test.ts:270:54
TS1005: ':' expected.
    268 |     test('has correct ARIA attributes', () => {
    269 |       const { container } = render(
  > 270 |         <LiveRegion priority="assertive" atomic={true}>
        |                                                      ^
    271 |           Test announcement
    272 |         </LiveRegion>
    273 |       );
ERROR in src/tests/accessibility.test.ts:271:11
TS2304: Cannot find name 'Test'.
    269 |       const { container } = render(
    270 |         <LiveRegion priority="assertive" atomic={true}>
  > 271 |           Test announcement
        |           ^^^^
    272 |         </LiveRegion>
    273 |       );
    274 |       
ERROR in src/tests/accessibility.test.ts:271:16
TS1005: ',' expected.
    269 |       const { container } = render(
    270 |         <LiveRegion priority="assertive" atomic={true}>
  > 271 |           Test announcement
        |                ^^^^^^^^^^^^
    272 |         </LiveRegion>
    273 |       );
    274 |       
ERROR in src/tests/accessibility.test.ts:271:16
TS2304: Cannot find name 'announcement'.
    269 |       const { container } = render(
    270 |         <LiveRegion priority="assertive" atomic={true}>
  > 271 |           Test announcement
        |                ^^^^^^^^^^^^
    272 |         </LiveRegion>
    273 |       );
    274 |       
ERROR in src/tests/accessibility.test.ts:283:10
TS2749: 'LiveRegion' refers to a value, but is being used as a type here. Did you mean 'typeof LiveRegion'?
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |          ^^^^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:21
TS1005: '>' expected.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                     ^^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:21
TS2304: Cannot find name 'priority'.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                     ^^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:29
TS1005: ',' expected.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                             ^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:39
TS2304: Cannot find name 'Initial'.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                                       ^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:47
TS1005: ',' expected.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                                               ^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:47
TS2304: Cannot find name 'message'.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                                               ^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:283:47
TS2554: Expected 1-2 arguments, but got 3.
    281 |     test('updates content for screen readers', async () => {
    282 |       const { rerender } = render(
  > 283 |         <LiveRegion priority="polite">Initial message</LiveRegion>
        |                                               ^^^^^^^^^^^^^^^^^^^^
    284 |       );
    285 |       
    286 |       rerender(
ERROR in src/tests/accessibility.test.ts:287:10
TS2749: 'LiveRegion' refers to a value, but is being used as a type here. Did you mean 'typeof LiveRegion'?
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |          ^^^^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:21
TS1005: '>' expected.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                     ^^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:21
TS2304: Cannot find name 'priority'.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                     ^^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:29
TS1005: ',' expected.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                             ^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:30
TS2554: Expected 1 arguments, but got 3.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:39
TS2304: Cannot find name 'Updated'.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                                       ^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:47
TS1005: ',' expected.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                                               ^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:287:47
TS2304: Cannot find name 'message'.
    285 |       
    286 |       rerender(
  > 287 |         <LiveRegion priority="polite">Updated message</LiveRegion>
        |                                               ^^^^^^^
    288 |       );
    289 |       
    290 |       await waitFor(() => {
ERROR in src/tests/accessibility.test.ts:299:10
TS2749: 'ScreenReaderOnly' refers to a value, but is being used as a type here. Did you mean 'typeof ScreenReaderOnly'?
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |          ^^^^^^^^^^^^^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:34
TS1005: ',' expected.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                  ^^^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:34
TS2304: Cannot find name 'reader'.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                  ^^^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:41
TS1005: ',' expected.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:41
TS2304: Cannot find name 'only'.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:41
TS2554: Expected 1-2 arguments, but got 4.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:46
TS1005: ',' expected.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                              ^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:299:46
TS2304: Cannot find name 'text'.
    297 |     test('renders without accessibility violations', async () => {
    298 |       const { container } = render(
  > 299 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                              ^^^^
    300 |       );
    301 |       
    302 |       const results = await axe(container);
ERROR in src/tests/accessibility.test.ts:308:10
TS2749: 'ScreenReaderOnly' refers to a value, but is being used as a type here. Did you mean 'typeof ScreenReaderOnly'?
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |          ^^^^^^^^^^^^^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:34
TS1005: ',' expected.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                  ^^^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:34
TS2304: Cannot find name 'reader'.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                  ^^^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:41
TS1005: ',' expected.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:41
TS2304: Cannot find name 'only'.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:41
TS2554: Expected 1-2 arguments, but got 4.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:46
TS1005: ',' expected.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                              ^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:308:46
TS2304: Cannot find name 'text'.
    306 |     test('is visually hidden but accessible to screen readers', () => {
    307 |       render(
  > 308 |         <ScreenReaderOnly>Screen reader only text</ScreenReaderOnly>
        |                                              ^^^^
    309 |       );
    310 |       
    311 |       const element = screen.getByText('Screen reader only text');
ERROR in src/tests/accessibility.test.ts:321:10
TS2749: 'ScreenReaderOnly' refers to a value, but is being used as a type here. Did you mean 'typeof ScreenReaderOnly'?
    319 |     test('becomes visible when focusable and focused', () => {
    320 |       render(
  > 321 |         <ScreenReaderOnly focusable={true}>
        |          ^^^^^^^^^^^^^^^^
    322 |           Focusable screen reader text
    323 |         </ScreenReaderOnly>
    324 |       );
ERROR in src/tests/accessibility.test.ts:321:27
TS1005: '>' expected.
    319 |     test('becomes visible when focusable and focused', () => {
    320 |       render(
  > 321 |         <ScreenReaderOnly focusable={true}>
        |                           ^^^^^^^^^
    322 |           Focusable screen reader text
    323 |         </ScreenReaderOnly>
    324 |       );
ERROR in src/tests/accessibility.test.ts:321:27
TS2304: Cannot find name 'focusable'.
    319 |     test('becomes visible when focusable and focused', () => {
    320 |       render(
  > 321 |         <ScreenReaderOnly focusable={true}>
        |                           ^^^^^^^^^
    322 |           Focusable screen reader text
    323 |         </ScreenReaderOnly>
    324 |       );
ERROR in src/tests/accessibility.test.ts:321:36
TS1005: ',' expected.
    319 |     test('becomes visible when focusable and focused', () => {
    320 |       render(
  > 321 |         <ScreenReaderOnly focusable={true}>
        |                                    ^
    322 |           Focusable screen reader text
    323 |         </ScreenReaderOnly>
    324 |       );
ERROR in src/tests/accessibility.test.ts:321:42
TS1005: ':' expected.
    319 |     test('becomes visible when focusable and focused', () => {
    320 |       render(
  > 321 |         <ScreenReaderOnly focusable={true}>
        |                                          ^
    322 |           Focusable screen reader text
    323 |         </ScreenReaderOnly>
    324 |       );
ERROR in src/tests/accessibility.test.ts:322:11
TS2304: Cannot find name 'Focusable'.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |           ^^^^^^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:322:21
TS1005: ',' expected.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                     ^^^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:322:21
TS2554: Expected 1-2 arguments, but got 5.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                     ^^^^^^^^^^^^^^^^^^
  > 323 |         </ScreenReaderOnly>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    324 |       );
    325 |       
    326 |       const element = screen.getByText('Focusable screen reader text');
ERROR in src/tests/accessibility.test.ts:322:28
TS1005: ',' expected.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                            ^^^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:322:28
TS2304: Cannot find name 'reader'.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                            ^^^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:322:35
TS1005: ',' expected.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                                   ^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:322:35
TS2304: Cannot find name 'text'.
    320 |       render(
    321 |         <ScreenReaderOnly focusable={true}>
  > 322 |           Focusable screen reader text
        |                                   ^^^^
    323 |         </ScreenReaderOnly>
    324 |       );
    325 |       
ERROR in src/tests/accessibility.test.ts:337:10
TS2304: Cannot find name 'div'.
    335 |     test('all interactive elements are keyboard accessible', () => {
    336 |       render(
  > 337 |         <div>
        |          ^^^
    338 |           <AccessibleButton>Button 1</AccessibleButton>
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
ERROR in src/tests/accessibility.test.ts:338:12
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    336 |       render(
    337 |         <div>
  > 338 |           <AccessibleButton>Button 1</AccessibleButton>
        |            ^^^^^^^^^^^^^^^^
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
    341 |             name="test"
ERROR in src/tests/accessibility.test.ts:338:29
TS2304: Cannot find name 'Button'.
    336 |       render(
    337 |         <div>
  > 338 |           <AccessibleButton>Button 1</AccessibleButton>
        |                             ^^^^^^
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
    341 |             name="test"
ERROR in src/tests/accessibility.test.ts:338:36
TS1005: ',' expected.
    336 |       render(
    337 |         <div>
  > 338 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
    341 |             name="test"
ERROR in src/tests/accessibility.test.ts:338:36
TS2365: Operator '<' cannot be applied to types 'number' and 'RegExp'.
    336 |       render(
    337 |         <div>
  > 338 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
    341 |             name="test"
ERROR in src/tests/accessibility.test.ts:338:36
TS2365: Operator '<' cannot be applied to types 'boolean' and 'ForwardRefExoticComponent<AccessibleButtonProps & RefAttributes<HTMLButtonElement>>'.
    336 |       render(
    337 |         <div>
  > 338 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    340 |           <FormField 
    341 |             name="test"
    342 |             label="Test Input"
ERROR in src/tests/accessibility.test.ts:339:29
TS2304: Cannot find name 'Button'.
    337 |         <div>
    338 |           <AccessibleButton>Button 1</AccessibleButton>
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        |                             ^^^^^^
    340 |           <FormField 
    341 |             name="test"
    342 |             label="Test Input"
ERROR in src/tests/accessibility.test.ts:339:36
TS1005: ',' expected.
    337 |         <div>
    338 |           <AccessibleButton>Button 1</AccessibleButton>
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^
    340 |           <FormField 
    341 |             name="test"
    342 |             label="Test Input"
ERROR in src/tests/accessibility.test.ts:339:36
TS2365: Operator '<' cannot be applied to types 'number' and 'RegExp'.
    337 |         <div>
    338 |           <AccessibleButton>Button 1</AccessibleButton>
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
    340 |           <FormField 
    341 |             name="test"
    342 |             label="Test Input"
ERROR in src/tests/accessibility.test.ts:339:36
TS2365: Operator '<' cannot be applied to types 'boolean' and 'MemoExoticComponent<ForwardRefExoticComponent<FormFieldProps & RefAttributes<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>>>'.
    337 |         <div>
    338 |           <AccessibleButton>Button 1</AccessibleButton>
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 340 |           <FormField 
        | ^^^^^^^^^^^^^^^^^^^^^
    341 |             name="test"
    342 |             label="Test Input"
    343 |             value=""
ERROR in src/tests/accessibility.test.ts:339:36
TS2554: Expected 1-2 arguments, but got 8.
    337 |         <div>
    338 |           <AccessibleButton>Button 1</AccessibleButton>
  > 339 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 340 |           <FormField 
        | ^^^^^^^^^^^^^^^^^^^^^
  > 341 |             name="test"
        | ^^^^^^^^^^^^^^^^^^^^^
  > 342 |             label="Test Input"
        | ^^^^^^^^^^^^^^^^^^^^^
  > 343 |             value=""
        | ^^^^^^^^^^^^^^^^^^^^^
  > 344 |             onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:341:13
TS1005: ',' expected.
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
  > 341 |             name="test"
        |             ^^^^
    342 |             label="Test Input"
    343 |             value=""
    344 |             onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:341:13
TS2588: Cannot assign to 'name' because it is a constant.
    339 |           <AccessibleButton>Button 2</AccessibleButton>
    340 |           <FormField 
  > 341 |             name="test"
        |             ^^^^
    342 |             label="Test Input"
    343 |             value=""
    344 |             onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:342:13
TS1005: ',' expected.
    340 |           <FormField 
    341 |             name="test"
  > 342 |             label="Test Input"
        |             ^^^^^
    343 |             value=""
    344 |             onChange={() => {}}
    345 |           />
ERROR in src/tests/accessibility.test.ts:342:13
TS2304: Cannot find name 'label'.
    340 |           <FormField 
    341 |             name="test"
  > 342 |             label="Test Input"
        |             ^^^^^
    343 |             value=""
    344 |             onChange={() => {}}
    345 |           />
ERROR in src/tests/accessibility.test.ts:343:13
TS1005: ',' expected.
    341 |             name="test"
    342 |             label="Test Input"
  > 343 |             value=""
        |             ^^^^^
    344 |             onChange={() => {}}
    345 |           />
    346 |         </div>
ERROR in src/tests/accessibility.test.ts:343:13
TS2304: Cannot find name 'value'.
    341 |             name="test"
    342 |             label="Test Input"
  > 343 |             value=""
        |             ^^^^^
    344 |             onChange={() => {}}
    345 |           />
    346 |         </div>
ERROR in src/tests/accessibility.test.ts:344:13
TS1005: ',' expected.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |             ^^^^^^^^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:344:13
TS2304: Cannot find name 'onChange'.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |             ^^^^^^^^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:344:22
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |                      ^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:344:23
TS1136: Property assignment expected.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |                       ^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:344:26
TS1005: ',' expected.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |                          ^^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:344:31
TS1005: ',' expected.
    342 |             label="Test Input"
    343 |             value=""
  > 344 |             onChange={() => {}}
        |                               ^
    345 |           />
    346 |         </div>
    347 |       );
ERROR in src/tests/accessibility.test.ts:345:11
TS1005: ',' expected.
    343 |             value=""
    344 |             onChange={() => {}}
  > 345 |           />
        |           ^
    346 |         </div>
    347 |       );
    348 |       
ERROR in src/tests/accessibility.test.ts:345:11
TS2345: Argument of type 'boolean' is not assignable to parameter of type 'number'.
    343 |             value=""
    344 |             onChange={() => {}}
  > 345 |           />
        |           ^^
  > 346 |         </div>
        | ^^^^^^^^^^^^^^^
    347 |       );
    348 |       
    349 |       const focusableElements = screen.getAllByRole(/(button|textbox)/);
ERROR in src/tests/accessibility.test.ts:361:10
TS2304: Cannot find name 'div'.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |          ^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:14
TS1005: '>' expected.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |              ^^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:14
TS2304: Cannot find name 'role'.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |              ^^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:18
TS1005: ',' expected.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                  ^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:28
TS1005: ',' expected.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                            ^^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:28
TS2304: Cannot find name 'aria'.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                            ^^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:28
TS2554: Expected 1-2 arguments, but got 5.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                            ^^^^^^^^^^^^^^^^^^
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 363 |         </div>
        | ^^^^^^^^^^^^^^^
    364 |       );
    365 |       
    366 |       fireEvent.keyDown(document, { key: 'Escape' });
ERROR in src/tests/accessibility.test.ts:361:33
TS2304: Cannot find name 'modal'.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                                 ^^^^^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:361:38
TS1005: ',' expected.
    359 |       
    360 |       render(
  > 361 |         <div role="dialog" aria-modal="true">
        |                                      ^
    362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
    363 |         </div>
    364 |       );
ERROR in src/tests/accessibility.test.ts:362:12
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |            ^^^^^^^^^^^^^^^^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:362:29
TS1005: '>' expected.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                             ^^^^^^^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:362:29
TS2304: Cannot find name 'onClick'.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                             ^^^^^^^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:362:36
TS1005: ',' expected.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                                    ^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:362:37
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:362:37
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 363 |         </div>
        | ^^^^^^^^^^^^^^^
    364 |       );
    365 |       
    366 |       fireEvent.keyDown(document, { key: 'Escape' });
ERROR in src/tests/accessibility.test.ts:362:51
TS2304: Cannot find name 'Close'.
    360 |       render(
    361 |         <div role="dialog" aria-modal="true">
  > 362 |           <AccessibleButton onClick={handleClose}>Close</AccessibleButton>
        |                                                   ^^^^^
    363 |         </div>
    364 |       );
    365 |       
ERROR in src/tests/accessibility.test.ts:369:3
TS1128: Declaration or statement expected.
    367 |       // Note: This would require implementing escape handling in a real modal
    368 |     });
  > 369 |   });
        |   ^
    370 |   
    371 |   describe('Screen Reader Compatibility Tests', () => {
    372 |     test('headings follow proper hierarchy', () => {
ERROR in src/tests/accessibility.test.ts:369:4
TS1128: Declaration or statement expected.
    367 |       // Note: This would require implementing escape handling in a real modal
    368 |     });
  > 369 |   });
        |    ^
    370 |   
    371 |   describe('Screen Reader Compatibility Tests', () => {
    372 |     test('headings follow proper hierarchy', () => {
ERROR in src/tests/accessibility.test.ts:374:10
TS2304: Cannot find name 'div'.
    372 |     test('headings follow proper hierarchy', () => {
    373 |       render(
  > 374 |         <div>
        |          ^^^
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
    377 |           <h3>Subsection Title</h3>
ERROR in src/tests/accessibility.test.ts:375:12
TS2749: 'h1' refers to a value, but is being used as a type here. Did you mean 'typeof h1'?
    373 |       render(
    374 |         <div>
  > 375 |           <h1>Main Title</h1>
        |            ^^
    376 |           <h2>Section Title</h2>
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
ERROR in src/tests/accessibility.test.ts:375:15
TS2304: Cannot find name 'Main'.
    373 |       render(
    374 |         <div>
  > 375 |           <h1>Main Title</h1>
        |               ^^^^
    376 |           <h2>Section Title</h2>
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
ERROR in src/tests/accessibility.test.ts:375:20
TS1005: ',' expected.
    373 |       render(
    374 |         <div>
  > 375 |           <h1>Main Title</h1>
        |                    ^^^^^
    376 |           <h2>Section Title</h2>
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
ERROR in src/tests/accessibility.test.ts:375:20
TS2304: Cannot find name 'Title'.
    373 |       render(
    374 |         <div>
  > 375 |           <h1>Main Title</h1>
        |                    ^^^^^
    376 |           <h2>Section Title</h2>
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
ERROR in src/tests/accessibility.test.ts:375:20
TS2365: Operator '<' cannot be applied to types 'boolean' and 'HTMLElement'.
    373 |       render(
    374 |         <div>
  > 375 |           <h1>Main Title</h1>
        |                    ^^^^^^^^^^
  > 376 |           <h2>Section Title</h2>
        | ^^^^^^^^^^^^^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:12
TS2448: Block-scoped variable 'h2' used before its declaration.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |            ^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:12
TS2454: Variable 'h2' is used before being assigned.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |            ^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:15
TS2304: Cannot find name 'Section'.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |               ^^^^^^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:23
TS1005: ',' expected.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |                       ^^^^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:23
TS2304: Cannot find name 'Title'.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |                       ^^^^^
    377 |           <h3>Subsection Title</h3>
    378 |         </div>
    379 |       );
ERROR in src/tests/accessibility.test.ts:376:23
TS2365: Operator '<' cannot be applied to types 'boolean' and 'HTMLElement'.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |                       ^^^^^^^^^^
  > 377 |           <h3>Subsection Title</h3>
        | ^^^^^^^^^^^^^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:376:23
TS2554: Expected 1-2 arguments, but got 4.
    374 |         <div>
    375 |           <h1>Main Title</h1>
  > 376 |           <h2>Section Title</h2>
        |                       ^^^^^^^^^^
  > 377 |           <h3>Subsection Title</h3>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 378 |         </div>
        | ^^^^^^^^^^^^^^^
    379 |       );
    380 |       
    381 |       const h1 = screen.getByRole('heading', { level: 1 });
ERROR in src/tests/accessibility.test.ts:377:12
TS2448: Block-scoped variable 'h3' used before its declaration.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |            ^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:377:12
TS2454: Variable 'h3' is used before being assigned.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |            ^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:377:15
TS2304: Cannot find name 'Subsection'.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |               ^^^^^^^^^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:377:26
TS1005: ',' expected.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |                          ^^^^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:377:26
TS2304: Cannot find name 'Title'.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |                          ^^^^^
    378 |         </div>
    379 |       );
    380 |       
ERROR in src/tests/accessibility.test.ts:377:26
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    375 |           <h1>Main Title</h1>
    376 |           <h2>Section Title</h2>
  > 377 |           <h3>Subsection Title</h3>
        |                          ^^^^^^^^^^
  > 378 |         </div>
        | ^^^^^^^^^^^^^^^
    379 |       );
    380 |       
    381 |       const h1 = screen.getByRole('heading', { level: 1 });
ERROR in src/tests/accessibility.test.ts:392:10
TS2304: Cannot find name 'div'.
    390 |     test('images have appropriate alt text', () => {
    391 |       render(
  > 392 |         <div>
        |          ^^^
    393 |           <img src="logo.png" alt="Company Logo" />
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
ERROR in src/tests/accessibility.test.ts:393:12
TS2304: Cannot find name 'img'.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |            ^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:16
TS1005: '>' expected.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                ^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:16
TS2304: Cannot find name 'src'.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                ^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:19
TS1005: ',' expected.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                   ^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:31
TS1005: ',' expected.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                               ^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:31
TS2304: Cannot find name 'alt'.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                               ^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:31
TS2554: Expected 1-2 arguments, but got 6.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                               ^^^^^^^^^^^^^^^^^^^^^
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 395 |         </div>
        | ^^^^^^^^^^^^^^^
    396 |       );
    397 |       
    398 |       const logo = screen.getByAltText('Company Logo');
ERROR in src/tests/accessibility.test.ts:393:35
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                                   ^^^^^^^^^^^^^^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:393:51
TS1109: Expression expected.
    391 |       render(
    392 |         <div>
  > 393 |           <img src="logo.png" alt="Company Logo" />
        |                                                   ^
    394 |           <img src="decorative.png" alt="" role="presentation" />
    395 |         </div>
    396 |       );
ERROR in src/tests/accessibility.test.ts:394:12
TS2304: Cannot find name 'img'.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |            ^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:16
TS1005: '>' expected.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                ^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:16
TS2304: Cannot find name 'src'.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                ^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:19
TS1005: ',' expected.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                   ^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:37
TS1005: ',' expected.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                     ^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:37
TS2304: Cannot find name 'alt'.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                     ^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:44
TS1005: ',' expected.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                            ^^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:44
TS2304: Cannot find name 'role'.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                            ^^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:49
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                                 ^^^^^^^^^^^^^^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:394:65
TS1109: Expression expected.
    392 |         <div>
    393 |           <img src="logo.png" alt="Company Logo" />
  > 394 |           <img src="decorative.png" alt="" role="presentation" />
        |                                                                 ^
    395 |         </div>
    396 |       );
    397 |       
ERROR in src/tests/accessibility.test.ts:395:10
TS1110: Type expected.
    393 |           <img src="logo.png" alt="Company Logo" />
    394 |           <img src="decorative.png" alt="" role="presentation" />
  > 395 |         </div>
        |          ^
    396 |       );
    397 |       
    398 |       const logo = screen.getByAltText('Company Logo');
ERROR in src/tests/accessibility.test.ts:407:10
TS2749: 'FormField' refers to a value, but is being used as a type here. Did you mean 'typeof FormField'?
    405 |     test('form controls have proper labels and descriptions', () => {
    406 |       render(
  > 407 |         <FormField 
        |          ^^^^^^^^^
    408 |           name="email"
    409 |           label="Email Address"
    410 |           type="email"
ERROR in src/tests/accessibility.test.ts:408:11
TS1005: '>' expected.
    406 |       render(
    407 |         <FormField 
  > 408 |           name="email"
        |           ^^^^
    409 |           label="Email Address"
    410 |           type="email"
    411 |           value=""
ERROR in src/tests/accessibility.test.ts:408:15
TS1005: ',' expected.
    406 |       render(
    407 |         <FormField 
  > 408 |           name="email"
        |               ^
    409 |           label="Email Address"
    410 |           type="email"
    411 |           value=""
ERROR in src/tests/accessibility.test.ts:409:11
TS1005: ',' expected.
    407 |         <FormField 
    408 |           name="email"
  > 409 |           label="Email Address"
        |           ^^^^^
    410 |           type="email"
    411 |           value=""
    412 |           helpText="We'll never share your email"
ERROR in src/tests/accessibility.test.ts:409:11
TS2304: Cannot find name 'label'.
    407 |         <FormField 
    408 |           name="email"
  > 409 |           label="Email Address"
        |           ^^^^^
    410 |           type="email"
    411 |           value=""
    412 |           helpText="We'll never share your email"
ERROR in src/tests/accessibility.test.ts:409:11
TS2554: Expected 1-2 arguments, but got 9.
    407 |         <FormField 
    408 |           name="email"
  > 409 |           label="Email Address"
        |           ^^^^^^^^^^^^^^^^^^^^^
  > 410 |           type="email"
        | ^^^^^^^^^^^^^^^^^^^^^^
  > 411 |           value=""
        | ^^^^^^^^^^^^^^^^^^^^^^
  > 412 |           helpText="We'll never share your email"
        | ^^^^^^^^^^^^^^^^^^^^^^
  > 413 |           required={true}
        | ^^^^^^^^^^^^^^^^^^^^^^
  > 414 |           onChange={() => {}}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:410:11
TS1005: ',' expected.
    408 |           name="email"
    409 |           label="Email Address"
  > 410 |           type="email"
        |           ^^^^
    411 |           value=""
    412 |           helpText="We'll never share your email"
    413 |           required={true}
ERROR in src/tests/accessibility.test.ts:410:11
TS2304: Cannot find name 'type'.
    408 |           name="email"
    409 |           label="Email Address"
  > 410 |           type="email"
        |           ^^^^
    411 |           value=""
    412 |           helpText="We'll never share your email"
    413 |           required={true}
ERROR in src/tests/accessibility.test.ts:411:11
TS1005: ',' expected.
    409 |           label="Email Address"
    410 |           type="email"
  > 411 |           value=""
        |           ^^^^^
    412 |           helpText="We'll never share your email"
    413 |           required={true}
    414 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:411:11
TS2304: Cannot find name 'value'.
    409 |           label="Email Address"
    410 |           type="email"
  > 411 |           value=""
        |           ^^^^^
    412 |           helpText="We'll never share your email"
    413 |           required={true}
    414 |           onChange={() => {}}
ERROR in src/tests/accessibility.test.ts:412:11
TS1005: ',' expected.
    410 |           type="email"
    411 |           value=""
  > 412 |           helpText="We'll never share your email"
        |           ^^^^^^^^
    413 |           required={true}
    414 |           onChange={() => {}}
    415 |         />
ERROR in src/tests/accessibility.test.ts:412:11
TS2304: Cannot find name 'helpText'.
    410 |           type="email"
    411 |           value=""
  > 412 |           helpText="We'll never share your email"
        |           ^^^^^^^^
    413 |           required={true}
    414 |           onChange={() => {}}
    415 |         />
ERROR in src/tests/accessibility.test.ts:413:11
TS1005: ',' expected.
    411 |           value=""
    412 |           helpText="We'll never share your email"
  > 413 |           required={true}
        |           ^^^^^^^^
    414 |           onChange={() => {}}
    415 |         />
    416 |       );
ERROR in src/tests/accessibility.test.ts:413:11
TS2304: Cannot find name 'required'.
    411 |           value=""
    412 |           helpText="We'll never share your email"
  > 413 |           required={true}
        |           ^^^^^^^^
    414 |           onChange={() => {}}
    415 |         />
    416 |       );
ERROR in src/tests/accessibility.test.ts:413:25
TS1005: ':' expected.
    411 |           value=""
    412 |           helpText="We'll never share your email"
  > 413 |           required={true}
        |                         ^
    414 |           onChange={() => {}}
    415 |         />
    416 |       );
ERROR in src/tests/accessibility.test.ts:414:11
TS1005: ',' expected.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |           ^^^^^^^^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:414:11
TS2304: Cannot find name 'onChange'.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |           ^^^^^^^^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:414:20
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |                    ^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:414:21
TS1136: Property assignment expected.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |                     ^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:414:24
TS1005: ',' expected.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |                        ^^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:414:29
TS1005: ',' expected.
    412 |           helpText="We'll never share your email"
    413 |           required={true}
  > 414 |           onChange={() => {}}
        |                             ^
    415 |         />
    416 |       );
    417 |       
ERROR in src/tests/accessibility.test.ts:415:9
TS1005: ',' expected.
    413 |           required={true}
    414 |           onChange={() => {}}
  > 415 |         />
        |         ^
    416 |       );
    417 |       
    418 |       const input = screen.getByLabelText('Email Address');
ERROR in src/tests/accessibility.test.ts:415:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    413 |           required={true}
    414 |           onChange={() => {}}
  > 415 |         />
        |         ^^
    416 |       );
    417 |       
    418 |       const input = screen.getByLabelText('Email Address');
ERROR in src/tests/accessibility.test.ts:423:3
TS1128: Declaration or statement expected.
    421 |       expect(input).toHaveAttribute('aria-describedby');
    422 |     });
  > 423 |   });
        |   ^
    424 |   
    425 |   describe('Motion and Animation Tests', () => {
    426 |     test('respects prefers-reduced-motion', () => {
ERROR in src/tests/accessibility.test.ts:423:4
TS1128: Declaration or statement expected.
    421 |       expect(input).toHaveAttribute('aria-describedby');
    422 |     });
  > 423 |   });
        |    ^
    424 |   
    425 |   describe('Motion and Animation Tests', () => {
    426 |     test('respects prefers-reduced-motion', () => {
ERROR in src/tests/accessibility.test.ts:443:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    441 |       
    442 |       render(
  > 443 |         <AccessibleButton>Animated Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    444 |       );
    445 |       
    446 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:443:27
TS2304: Cannot find name 'Animated'.
    441 |       
    442 |       render(
  > 443 |         <AccessibleButton>Animated Button</AccessibleButton>
        |                           ^^^^^^^^
    444 |       );
    445 |       
    446 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:443:36
TS1005: ',' expected.
    441 |       
    442 |       render(
  > 443 |         <AccessibleButton>Animated Button</AccessibleButton>
        |                                    ^^^^^^
    444 |       );
    445 |       
    446 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:443:36
TS2304: Cannot find name 'Button'.
    441 |       
    442 |       render(
  > 443 |         <AccessibleButton>Animated Button</AccessibleButton>
        |                                    ^^^^^^
    444 |       );
    445 |       
    446 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:443:36
TS2769: No overload matches this call.
  Overload 1 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options: RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>'.
  Overload 2 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options?: Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries"> | undefined): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries">'.
    441 |       
    442 |       render(
  > 443 |         <AccessibleButton>Animated Button</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
    444 |       );
    445 |       
    446 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:27
TS1005: '>' expected.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                           ^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:27
TS2304: Cannot find name 'variant'.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                           ^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:34
TS1005: ',' expected.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                  ^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:45
TS2304: Cannot find name 'High'.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                             ^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:50
TS1005: ',' expected.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                                  ^^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:50
TS2304: Cannot find name 'Contrast'.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                                  ^^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:50
TS2554: Expected 1-2 arguments, but got 4.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:59
TS1005: ',' expected.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                                           ^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:470:59
TS2304: Cannot find name 'Button'.
    468 |       
    469 |       render(
  > 470 |         <AccessibleButton variant="primary">High Contrast Button</AccessibleButton>
        |                                                           ^^^^^^
    471 |       );
    472 |       
    473 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:482:10
TS2304: Cannot find name 'div'.
    480 |     test('focus is properly managed in dynamic content', async () => {
    481 |       const { rerender } = render(
  > 482 |         <div>
        |          ^^^
    483 |           <AccessibleButton>Button 1</AccessibleButton>
    484 |         </div>
    485 |       );
ERROR in src/tests/accessibility.test.ts:483:12
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |            ^^^^^^^^^^^^^^^^
    484 |         </div>
    485 |       );
    486 |       
ERROR in src/tests/accessibility.test.ts:483:29
TS2304: Cannot find name 'Button'.
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |                             ^^^^^^
    484 |         </div>
    485 |       );
    486 |       
ERROR in src/tests/accessibility.test.ts:483:36
TS1005: ',' expected.
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^
    484 |         </div>
    485 |       );
    486 |       
ERROR in src/tests/accessibility.test.ts:483:36
TS2365: Operator '<' cannot be applied to types 'number' and 'RegExp'.
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
    484 |         </div>
    485 |       );
    486 |       
ERROR in src/tests/accessibility.test.ts:483:36
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 484 |         </div>
        | ^^^^^^^^^^^^^^^
    485 |       );
    486 |       
    487 |       const button1 = screen.getByText('Button 1');
ERROR in src/tests/accessibility.test.ts:483:36
TS2769: No overload matches this call.
  Overload 1 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options: RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>'.
  Overload 2 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options?: Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries"> | undefined): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries">'.
    481 |       const { rerender } = render(
    482 |         <div>
  > 483 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 484 |         </div>
        | ^^^^^^^^^^^^^^^
    485 |       );
    486 |       
    487 |       const button1 = screen.getByText('Button 1');
ERROR in src/tests/accessibility.test.ts:492:10
TS2304: Cannot find name 'div'.
    490 |       
    491 |       rerender(
  > 492 |         <div>
        |          ^^^
    493 |           <AccessibleButton>Button 1</AccessibleButton>
    494 |           <AccessibleButton>Button 2</AccessibleButton>
    495 |         </div>
ERROR in src/tests/accessibility.test.ts:493:12
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |            ^^^^^^^^^^^^^^^^
    494 |           <AccessibleButton>Button 2</AccessibleButton>
    495 |         </div>
    496 |       );
ERROR in src/tests/accessibility.test.ts:493:29
TS2304: Cannot find name 'Button'.
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |                             ^^^^^^
    494 |           <AccessibleButton>Button 2</AccessibleButton>
    495 |         </div>
    496 |       );
ERROR in src/tests/accessibility.test.ts:493:36
TS1005: ',' expected.
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^
    494 |           <AccessibleButton>Button 2</AccessibleButton>
    495 |         </div>
    496 |       );
ERROR in src/tests/accessibility.test.ts:493:36
TS2365: Operator '<' cannot be applied to types 'number' and 'RegExp'.
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
    494 |           <AccessibleButton>Button 2</AccessibleButton>
    495 |         </div>
    496 |       );
ERROR in src/tests/accessibility.test.ts:493:36
TS2365: Operator '<' cannot be applied to types 'boolean' and 'ForwardRefExoticComponent<AccessibleButtonProps & RefAttributes<HTMLButtonElement>>'.
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    495 |         </div>
    496 |       );
    497 |       
ERROR in src/tests/accessibility.test.ts:493:36
TS2554: Expected 1 arguments, but got 3.
    491 |       rerender(
    492 |         <div>
  > 493 |           <AccessibleButton>Button 1</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 495 |         </div>
        | ^^^^^^^^^^^^^^^
    496 |       );
    497 |       
    498 |       // Focus should remain on Button 1
ERROR in src/tests/accessibility.test.ts:494:29
TS2304: Cannot find name 'Button'.
    492 |         <div>
    493 |           <AccessibleButton>Button 1</AccessibleButton>
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        |                             ^^^^^^
    495 |         </div>
    496 |       );
    497 |       
ERROR in src/tests/accessibility.test.ts:494:36
TS1005: ',' expected.
    492 |         <div>
    493 |           <AccessibleButton>Button 1</AccessibleButton>
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^
    495 |         </div>
    496 |       );
    497 |       
ERROR in src/tests/accessibility.test.ts:494:36
TS2365: Operator '<' cannot be applied to types 'number' and 'RegExp'.
    492 |         <div>
    493 |           <AccessibleButton>Button 1</AccessibleButton>
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
    495 |         </div>
    496 |       );
    497 |       
ERROR in src/tests/accessibility.test.ts:494:36
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    492 |         <div>
    493 |           <AccessibleButton>Button 1</AccessibleButton>
  > 494 |           <AccessibleButton>Button 2</AccessibleButton>
        |                                    ^^^^^^^^^^^^^^^^^^^^
  > 495 |         </div>
        | ^^^^^^^^^^^^^^^
    496 |       );
    497 |       
    498 |       // Focus should remain on Button 1
ERROR in src/tests/accessibility.test.ts:504:10
TS2749: 'AccessibleButton' refers to a value, but is being used as a type here. Did you mean 'typeof AccessibleButton'?
    502 |     test('focus indicators are visible for keyboard users', () => {
    503 |       render(
  > 504 |         <AccessibleButton>Test Button</AccessibleButton>
        |          ^^^^^^^^^^^^^^^^
    505 |       );
    506 |       
    507 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:504:27
TS2304: Cannot find name 'Test'.
    502 |     test('focus indicators are visible for keyboard users', () => {
    503 |       render(
  > 504 |         <AccessibleButton>Test Button</AccessibleButton>
        |                           ^^^^
    505 |       );
    506 |       
    507 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:504:32
TS1005: ',' expected.
    502 |     test('focus indicators are visible for keyboard users', () => {
    503 |       render(
  > 504 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^
    505 |       );
    506 |       
    507 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:504:32
TS2304: Cannot find name 'Button'.
    502 |     test('focus indicators are visible for keyboard users', () => {
    503 |       render(
  > 504 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^
    505 |       );
    506 |       
    507 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:504:32
TS2769: No overload matches this call.
  Overload 1 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options: RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>'.
  Overload 2 of 2, '(ui: ReactElement<any, string | JSXElementConstructor<any>>, options?: Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries"> | undefined): RenderResult<...>', gave the following error.
    Type 'boolean' has no properties in common with type 'Omit<RenderOptions<typeof import("/Users/umitgencay/Safira/safira-lounge-menu/node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries"), HTMLElement, HTMLElement>, "queries">'.
    502 |     test('focus indicators are visible for keyboard users', () => {
    503 |       render(
  > 504 |         <AccessibleButton>Test Button</AccessibleButton>
        |                                ^^^^^^^^^^^^^^^^^^^^^^^^^
    505 |       );
    506 |       
    507 |       const button = screen.getByRole('button');
ERROR in src/tests/accessibility.test.ts:515:1
TS1128: Declaration or statement expected.
    513 |     });
    514 |   });
  > 515 | });
        | ^
    516 |
    517 | /**
    518 |  * Custom accessibility testing utilities
ERROR in src/tests/accessibility.test.ts:515:2
TS1128: Declaration or statement expected.
    513 |     });
    514 |   });
  > 515 | });
        |  ^
    516 |
    517 | /**
    518 |  * Custom accessibility testing utilities
ERROR in src/tests/performance.test.ts
TS1161: Unterminated regular expression literal.
ERROR in src/tests/performance.test.ts:9:28
TS2307: Cannot find module '@testing-library/react-hooks' or its corresponding type declarations.
     7 |
     8 | import { render, screen, waitFor, act } from '@testing-library/react';
  >  9 | import { renderHook } from '@testing-library/react-hooks';
       |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    10 | import userEvent from '@testing-library/user-event';
    11 | import { performanceMonitor, PERFORMANCE_THRESHOLDS } from '../utils/performance';
    12 | import { useDebounce, useDebouncedCallback } from '../hooks/useDebounce';
ERROR in src/tests/performance.test.ts:80:12
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    78 |       const renderTime = measureRenderTime(() => {
    79 |         render(
  > 80 |           <OptimizedProductGrid
       |            ^^^^^^^^^^^^^^^^^^^^
    81 |             products={mockProducts.slice(0, 100)}
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
ERROR in src/tests/performance.test.ts:81:13
TS1005: '>' expected.
    79 |         render(
    80 |           <OptimizedProductGrid
  > 81 |             products={mockProducts.slice(0, 100)}
       |             ^^^^^^^^
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
ERROR in src/tests/performance.test.ts:81:13
TS2304: Cannot find name 'products'.
    79 |         render(
    80 |           <OptimizedProductGrid
  > 81 |             products={mockProducts.slice(0, 100)}
       |             ^^^^^^^^
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
ERROR in src/tests/performance.test.ts:81:21
TS1005: ',' expected.
    79 |         render(
    80 |           <OptimizedProductGrid
  > 81 |             products={mockProducts.slice(0, 100)}
       |                     ^
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
ERROR in src/tests/performance.test.ts:81:35
TS1005: ',' expected.
    79 |         render(
    80 |           <OptimizedProductGrid
  > 81 |             products={mockProducts.slice(0, 100)}
       |                                   ^
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
ERROR in src/tests/performance.test.ts:82:13
TS1005: ',' expected.
    80 |           <OptimizedProductGrid
    81 |             products={mockProducts.slice(0, 100)}
  > 82 |             language="en"
       |             ^^^^^^^^
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
    85 |         );
ERROR in src/tests/performance.test.ts:82:13
TS2304: Cannot find name 'language'.
    80 |           <OptimizedProductGrid
    81 |             products={mockProducts.slice(0, 100)}
  > 82 |             language="en"
       |             ^^^^^^^^
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
    84 |           />
    85 |         );
ERROR in src/tests/performance.test.ts:82:13
TS2554: Expected 1-2 arguments, but got 5.
    80 |           <OptimizedProductGrid
    81 |             products={mockProducts.slice(0, 100)}
  > 82 |             language="en"
       |             ^^^^^^^^^^^^^
  > 83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
       | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    84 |           />
    85 |         );
    86 |       });
ERROR in src/tests/performance.test.ts:83:13
TS1005: ',' expected.
    81 |             products={mockProducts.slice(0, 100)}
    82 |             language="en"
  > 83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
       |             ^^^^^^^^^^^^^^^^^^^^^
    84 |           />
    85 |         );
    86 |       });
ERROR in src/tests/performance.test.ts:83:13
TS2304: Cannot find name 'performanceMonitoring'.
    81 |             products={mockProducts.slice(0, 100)}
    82 |             language="en"
  > 83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
       |             ^^^^^^^^^^^^^^^^^^^^^
    84 |           />
    85 |         );
    86 |       });
ERROR in src/tests/performance.test.ts:83:36
TS1136: Property assignment expected.
    81 |             products={mockProducts.slice(0, 100)}
    82 |             language="en"
  > 83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
       |                                    ^
    84 |           />
    85 |         );
    86 |       });
ERROR in src/tests/performance.test.ts:83:72
TS1005: ',' expected.
    81 |             products={mockProducts.slice(0, 100)}
    82 |             language="en"
  > 83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
       |                                                                        ^
    84 |           />
    85 |         );
    86 |       });
ERROR in src/tests/performance.test.ts:84:11
TS1005: ',' expected.
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
  > 84 |           />
       |           ^
    85 |         );
    86 |       });
    87 |
ERROR in src/tests/performance.test.ts:84:11
TS2554: Expected 1 arguments, but got 2.
    82 |             language="en"
    83 |             performanceMonitoring={{ enabled: true, logMetrics: false }}
  > 84 |           />
       |           ^^
    85 |         );
    86 |       });
    87 |
ERROR in src/tests/performance.test.ts:94:12
TS2749: 'OptimizedMenuProductCard' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedMenuProductCard'?
    92 |       const renderTime = measureRenderTime(() => {
    93 |         render(
  > 94 |           <OptimizedMenuProductCard
       |            ^^^^^^^^^^^^^^^^^^^^^^^^
    95 |             product={mockProducts[0]}
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
ERROR in src/tests/performance.test.ts:95:13
TS1005: '>' expected.
    93 |         render(
    94 |           <OptimizedMenuProductCard
  > 95 |             product={mockProducts[0]}
       |             ^^^^^^^
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
    98 |           />
ERROR in src/tests/performance.test.ts:95:13
TS2304: Cannot find name 'product'.
    93 |         render(
    94 |           <OptimizedMenuProductCard
  > 95 |             product={mockProducts[0]}
       |             ^^^^^^^
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
    98 |           />
ERROR in src/tests/performance.test.ts:95:20
TS1005: ',' expected.
    93 |         render(
    94 |           <OptimizedMenuProductCard
  > 95 |             product={mockProducts[0]}
       |                    ^
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
    98 |           />
ERROR in src/tests/performance.test.ts:95:34
TS1005: ',' expected.
    93 |         render(
    94 |           <OptimizedMenuProductCard
  > 95 |             product={mockProducts[0]}
       |                                  ^
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
    98 |           />
ERROR in src/tests/performance.test.ts:95:37
TS1005: ':' expected.
    93 |         render(
    94 |           <OptimizedMenuProductCard
  > 95 |             product={mockProducts[0]}
       |                                     ^
    96 |             language="en"
    97 |             enablePerformanceMonitoring={false}
    98 |           />
ERROR in src/tests/performance.test.ts:96:13
TS1005: ',' expected.
    94 |           <OptimizedMenuProductCard
    95 |             product={mockProducts[0]}
  > 96 |             language="en"
       |             ^^^^^^^^
    97 |             enablePerformanceMonitoring={false}
    98 |           />
    99 |         );
ERROR in src/tests/performance.test.ts:96:13
TS2304: Cannot find name 'language'.
    94 |           <OptimizedMenuProductCard
    95 |             product={mockProducts[0]}
  > 96 |             language="en"
       |             ^^^^^^^^
    97 |             enablePerformanceMonitoring={false}
    98 |           />
    99 |         );
ERROR in src/tests/performance.test.ts:96:13
TS2554: Expected 1-2 arguments, but got 4.
     94 |           <OptimizedMenuProductCard
     95 |             product={mockProducts[0]}
  >  96 |             language="en"
        |             ^^^^^^^^^^^^^
  >  97 |             enablePerformanceMonitoring={false}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  >  98 |           />
        | ^^^^^^^^^^^^^
     99 |         );
    100 |       });
    101 |
ERROR in src/tests/performance.test.ts:97:13
TS1005: ',' expected.
     95 |             product={mockProducts[0]}
     96 |             language="en"
  >  97 |             enablePerformanceMonitoring={false}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     98 |           />
     99 |         );
    100 |       });
ERROR in src/tests/performance.test.ts:97:13
TS2304: Cannot find name 'enablePerformanceMonitoring'.
     95 |             product={mockProducts[0]}
     96 |             language="en"
  >  97 |             enablePerformanceMonitoring={false}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     98 |           />
     99 |         );
    100 |       });
ERROR in src/tests/performance.test.ts:97:41
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
     95 |             product={mockProducts[0]}
     96 |             language="en"
  >  97 |             enablePerformanceMonitoring={false}
        |                                         ^^^^^^^
     98 |           />
     99 |         );
    100 |       });
ERROR in src/tests/performance.test.ts:97:47
TS1005: ':' expected.
     95 |             product={mockProducts[0]}
     96 |             language="en"
  >  97 |             enablePerformanceMonitoring={false}
        |                                               ^
     98 |           />
     99 |         );
    100 |       });
ERROR in src/tests/performance.test.ts:98:12
TS1109: Expression expected.
     96 |             language="en"
     97 |             enablePerformanceMonitoring={false}
  >  98 |           />
        |            ^
     99 |         );
    100 |       });
    101 |
ERROR in src/tests/performance.test.ts:99:9
TS1109: Expression expected.
     97 |             enablePerformanceMonitoring={false}
     98 |           />
  >  99 |         );
        |         ^
    100 |       });
    101 |
    102 |       expect(renderTime).toBeLessThan(50); // 50ms threshold for individual cards
ERROR in src/tests/performance.test.ts:107:10
TS2304: Cannot find name 'div'.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |          ^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:14
TS1005: '>' expected.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |              ^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:14
TS2304: Cannot find name 'key'.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |              ^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:17
TS1005: ')' expected.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                 ^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:23
TS1005: ',' expected.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                       ^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:28
TS1005: ',' expected.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                            ^^^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:28
TS2304: Cannot find name 'style'.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                            ^^^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:107:28
TS2554: Expected 0-1 arguments, but got 2.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                            ^^^^^^^^^^^^^^
  > 108 |           {item.name.en}
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 109 |         </div>
        | ^^^^^^^^^^^^^^^
    110 |       ));
    111 |
    112 |       const renderTime = measureRenderTime(() => {
ERROR in src/tests/performance.test.ts:107:34
TS2365: Operator '>' cannot be applied to types '{ style: any; }' and '{ item: any; "": any; }'.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                                  ^^^^^^^^
  > 108 |           {item.name.en}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^
    109 |         </div>
    110 |       ));
    111 |
ERROR in src/tests/performance.test.ts:107:34
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                                  ^^^^^^^^
  > 108 |           {item.name.en}
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 109 |         </div>
        | ^^^^^^^^^^^^^^^
    110 |       ));
    111 |
    112 |       const renderTime = measureRenderTime(() => {
ERROR in src/tests/performance.test.ts:107:35
TS18004: No value exists in scope for the shorthand property 'style'. Either declare one or provide an initializer.
    105 |     test('VirtualList handles large datasets efficiently', async () => {
    106 |       const renderItem = jest.fn((item, index, style) => (
  > 107 |         <div key={item.id} style={style}>
        |                                   ^^^^^
    108 |           {item.name.en}
    109 |         </div>
    110 |       ));
ERROR in src/tests/performance.test.ts:108:12
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    106 |       const renderItem = jest.fn((item, index, style) => (
    107 |         <div key={item.id} style={style}>
  > 108 |           {item.name.en}
        |            ^^^^
    109 |         </div>
    110 |       ));
    111 |
ERROR in src/tests/performance.test.ts:108:16
TS1005: ',' expected.
    106 |       const renderItem = jest.fn((item, index, style) => (
    107 |         <div key={item.id} style={style}>
  > 108 |           {item.name.en}
        |                ^
    109 |         </div>
    110 |       ));
    111 |
ERROR in src/tests/performance.test.ts:110:8
TS1005: ',' expected.
    108 |           {item.name.en}
    109 |         </div>
  > 110 |       ));
        |        ^
    111 |
    112 |       const renderTime = measureRenderTime(() => {
    113 |         render(
ERROR in src/tests/performance.test.ts:114:12
TS2749: 'VirtualList' refers to a value, but is being used as a type here. Did you mean 'typeof VirtualList'?
    112 |       const renderTime = measureRenderTime(() => {
    113 |         render(
  > 114 |           <VirtualList
        |            ^^^^^^^^^^^
    115 |             items={mockProducts}
    116 |             itemHeight={100}
    117 |             height="500px"
ERROR in src/tests/performance.test.ts:115:13
TS1005: '>' expected.
    113 |         render(
    114 |           <VirtualList
  > 115 |             items={mockProducts}
        |             ^^^^^
    116 |             itemHeight={100}
    117 |             height="500px"
    118 |             renderItem={renderItem}
ERROR in src/tests/performance.test.ts:115:13
TS2304: Cannot find name 'items'.
    113 |         render(
    114 |           <VirtualList
  > 115 |             items={mockProducts}
        |             ^^^^^
    116 |             itemHeight={100}
    117 |             height="500px"
    118 |             renderItem={renderItem}
ERROR in src/tests/performance.test.ts:115:18
TS1005: ',' expected.
    113 |         render(
    114 |           <VirtualList
  > 115 |             items={mockProducts}
        |                  ^
    116 |             itemHeight={100}
    117 |             height="500px"
    118 |             renderItem={renderItem}
ERROR in src/tests/performance.test.ts:116:13
TS1005: ',' expected.
    114 |           <VirtualList
    115 |             items={mockProducts}
  > 116 |             itemHeight={100}
        |             ^^^^^^^^^^
    117 |             height="500px"
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:116:13
TS2304: Cannot find name 'itemHeight'.
    114 |           <VirtualList
    115 |             items={mockProducts}
  > 116 |             itemHeight={100}
        |             ^^^^^^^^^^
    117 |             height="500px"
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:116:13
TS2554: Expected 1-2 arguments, but got 6.
    114 |           <VirtualList
    115 |             items={mockProducts}
  > 116 |             itemHeight={100}
        |             ^^^^^^^^^^^^^^^^
  > 117 |             height="500px"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 118 |             renderItem={renderItem}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 119 |             enablePerformanceMonitoring={true}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 120 |           />
        | ^^^^^^^^^^^^^
    121 |         );
    122 |       });
    123 |
ERROR in src/tests/performance.test.ts:116:28
TS1005: ':' expected.
    114 |           <VirtualList
    115 |             items={mockProducts}
  > 116 |             itemHeight={100}
        |                            ^
    117 |             height="500px"
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:117:13
TS1005: ',' expected.
    115 |             items={mockProducts}
    116 |             itemHeight={100}
  > 117 |             height="500px"
        |             ^^^^^^
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
    120 |           />
ERROR in src/tests/performance.test.ts:117:13
TS2304: Cannot find name 'height'.
    115 |             items={mockProducts}
    116 |             itemHeight={100}
  > 117 |             height="500px"
        |             ^^^^^^
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
    120 |           />
ERROR in src/tests/performance.test.ts:118:13
TS1005: ',' expected.
    116 |             itemHeight={100}
    117 |             height="500px"
  > 118 |             renderItem={renderItem}
        |             ^^^^^^^^^^
    119 |             enablePerformanceMonitoring={true}
    120 |           />
    121 |         );
ERROR in src/tests/performance.test.ts:118:13
TS2304: Cannot find name 'renderItem'.
    116 |             itemHeight={100}
    117 |             height="500px"
  > 118 |             renderItem={renderItem}
        |             ^^^^^^^^^^
    119 |             enablePerformanceMonitoring={true}
    120 |           />
    121 |         );
ERROR in src/tests/performance.test.ts:118:25
TS18004: No value exists in scope for the shorthand property 'renderItem'. Either declare one or provide an initializer.
    116 |             itemHeight={100}
    117 |             height="500px"
  > 118 |             renderItem={renderItem}
        |                         ^^^^^^^^^^
    119 |             enablePerformanceMonitoring={true}
    120 |           />
    121 |         );
ERROR in src/tests/performance.test.ts:119:13
TS1005: ',' expected.
    117 |             height="500px"
    118 |             renderItem={renderItem}
  > 119 |             enablePerformanceMonitoring={true}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    120 |           />
    121 |         );
    122 |       });
ERROR in src/tests/performance.test.ts:119:13
TS2304: Cannot find name 'enablePerformanceMonitoring'.
    117 |             height="500px"
    118 |             renderItem={renderItem}
  > 119 |             enablePerformanceMonitoring={true}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    120 |           />
    121 |         );
    122 |       });
ERROR in src/tests/performance.test.ts:119:41
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    117 |             height="500px"
    118 |             renderItem={renderItem}
  > 119 |             enablePerformanceMonitoring={true}
        |                                         ^^^^^^
    120 |           />
    121 |         );
    122 |       });
ERROR in src/tests/performance.test.ts:119:46
TS1005: ':' expected.
    117 |             height="500px"
    118 |             renderItem={renderItem}
  > 119 |             enablePerformanceMonitoring={true}
        |                                              ^
    120 |           />
    121 |         );
    122 |       });
ERROR in src/tests/performance.test.ts:120:12
TS1109: Expression expected.
    118 |             renderItem={renderItem}
    119 |             enablePerformanceMonitoring={true}
  > 120 |           />
        |            ^
    121 |         );
    122 |       });
    123 |
ERROR in src/tests/performance.test.ts:121:9
TS1109: Expression expected.
    119 |             enablePerformanceMonitoring={true}
    120 |           />
  > 121 |         );
        |         ^
    122 |       });
    123 |
    124 |       // Virtual list should render quickly regardless of data size
ERROR in src/tests/performance.test.ts:129:16
TS2304: Cannot find name 'renderItem'.
    127 |       // Should only render visible items + overscan
    128 |       await waitFor(() => {
  > 129 |         expect(renderItem).toHaveBeenCalledTimes(expect.any(Number));
        |                ^^^^^^^^^^
    130 |         expect(renderItem.mock.calls.length).toBeLessThan(20); // Much less than 1000 items
    131 |       });
    132 |     });
ERROR in src/tests/performance.test.ts:130:16
TS2304: Cannot find name 'renderItem'.
    128 |       await waitFor(() => {
    129 |         expect(renderItem).toHaveBeenCalledTimes(expect.any(Number));
  > 130 |         expect(renderItem.mock.calls.length).toBeLessThan(20); // Much less than 1000 items
        |                ^^^^^^^^^^
    131 |       });
    132 |     });
    133 |
ERROR in src/tests/performance.test.ts:139:12
TS2749: 'LazyImage' refers to a value, but is being used as a type here. Did you mean 'typeof LazyImage'?
    137 |       const renderTime = measureRenderTime(() => {
    138 |         render(
  > 139 |           <LazyImage
        |            ^^^^^^^^^
    140 |             src="https://example.com/test-image.jpg"
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
ERROR in src/tests/performance.test.ts:140:13
TS1005: '>' expected.
    138 |         render(
    139 |           <LazyImage
  > 140 |             src="https://example.com/test-image.jpg"
        |             ^^^
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:140:13
TS2304: Cannot find name 'src'.
    138 |         render(
    139 |           <LazyImage
  > 140 |             src="https://example.com/test-image.jpg"
        |             ^^^
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:140:16
TS1005: ',' expected.
    138 |         render(
    139 |           <LazyImage
  > 140 |             src="https://example.com/test-image.jpg"
        |                ^
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
ERROR in src/tests/performance.test.ts:141:13
TS1005: ',' expected.
    139 |           <LazyImage
    140 |             src="https://example.com/test-image.jpg"
  > 141 |             alt="Test image"
        |             ^^^
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
    144 |           />
ERROR in src/tests/performance.test.ts:141:13
TS2304: Cannot find name 'alt'.
    139 |           <LazyImage
    140 |             src="https://example.com/test-image.jpg"
  > 141 |             alt="Test image"
        |             ^^^
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
    144 |           />
ERROR in src/tests/performance.test.ts:141:13
TS2554: Expected 1-2 arguments, but got 5.
    139 |           <LazyImage
    140 |             src="https://example.com/test-image.jpg"
  > 141 |             alt="Test image"
        |             ^^^^^^^^^^^^^^^^
  > 142 |             onLoad={onLoad}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 143 |             enablePerformanceMonitoring={true}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 144 |           />
        | ^^^^^^^^^^^^^
    145 |         );
    146 |       });
    147 |
ERROR in src/tests/performance.test.ts:142:13
TS1005: ',' expected.
    140 |             src="https://example.com/test-image.jpg"
    141 |             alt="Test image"
  > 142 |             onLoad={onLoad}
        |             ^^^^^^
    143 |             enablePerformanceMonitoring={true}
    144 |           />
    145 |         );
ERROR in src/tests/performance.test.ts:142:13
TS2588: Cannot assign to 'onLoad' because it is a constant.
    140 |             src="https://example.com/test-image.jpg"
    141 |             alt="Test image"
  > 142 |             onLoad={onLoad}
        |             ^^^^^^
    143 |             enablePerformanceMonitoring={true}
    144 |           />
    145 |         );
ERROR in src/tests/performance.test.ts:143:13
TS1005: ',' expected.
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
  > 143 |             enablePerformanceMonitoring={true}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    144 |           />
    145 |         );
    146 |       });
ERROR in src/tests/performance.test.ts:143:13
TS2304: Cannot find name 'enablePerformanceMonitoring'.
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
  > 143 |             enablePerformanceMonitoring={true}
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    144 |           />
    145 |         );
    146 |       });
ERROR in src/tests/performance.test.ts:143:41
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
  > 143 |             enablePerformanceMonitoring={true}
        |                                         ^^^^^^
    144 |           />
    145 |         );
    146 |       });
ERROR in src/tests/performance.test.ts:143:46
TS1005: ':' expected.
    141 |             alt="Test image"
    142 |             onLoad={onLoad}
  > 143 |             enablePerformanceMonitoring={true}
        |                                              ^
    144 |           />
    145 |         );
    146 |       });
ERROR in src/tests/performance.test.ts:144:12
TS1109: Expression expected.
    142 |             onLoad={onLoad}
    143 |             enablePerformanceMonitoring={true}
  > 144 |           />
        |            ^
    145 |         );
    146 |       });
    147 |
ERROR in src/tests/performance.test.ts:145:9
TS1109: Expression expected.
    143 |             enablePerformanceMonitoring={true}
    144 |           />
  > 145 |         );
        |         ^
    146 |       });
    147 |
    148 |       expect(renderTime).toBeLessThan(50); // Should render placeholder quickly
ERROR in src/tests/performance.test.ts:150:3
TS1128: Declaration or statement expected.
    148 |       expect(renderTime).toBeLessThan(50); // Should render placeholder quickly
    149 |     });
  > 150 |   });
        |   ^
    151 |
    152 |   describe('React.memo Optimization', () => {
    153 |     test('OptimizedProductGrid prevents unnecessary re-renders', () => {
ERROR in src/tests/performance.test.ts:150:4
TS1128: Declaration or statement expected.
    148 |       expect(renderTime).toBeLessThan(50); // Should render placeholder quickly
    149 |     });
  > 150 |   });
        |    ^
    151 |
    152 |   describe('React.memo Optimization', () => {
    153 |     test('OptimizedProductGrid prevents unnecessary re-renders', () => {
ERROR in src/tests/performance.test.ts:155:10
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    153 |     test('OptimizedProductGrid prevents unnecessary re-renders', () => {
    154 |       const { rerender } = render(
  > 155 |         <OptimizedProductGrid
        |          ^^^^^^^^^^^^^^^^^^^^
    156 |           products={mockProducts.slice(0, 10)}
    157 |           language="en"
    158 |         />
ERROR in src/tests/performance.test.ts:156:11
TS1005: '>' expected.
    154 |       const { rerender } = render(
    155 |         <OptimizedProductGrid
  > 156 |           products={mockProducts.slice(0, 10)}
        |           ^^^^^^^^
    157 |           language="en"
    158 |         />
    159 |       );
ERROR in src/tests/performance.test.ts:156:11
TS2304: Cannot find name 'products'.
    154 |       const { rerender } = render(
    155 |         <OptimizedProductGrid
  > 156 |           products={mockProducts.slice(0, 10)}
        |           ^^^^^^^^
    157 |           language="en"
    158 |         />
    159 |       );
ERROR in src/tests/performance.test.ts:156:19
TS1005: ',' expected.
    154 |       const { rerender } = render(
    155 |         <OptimizedProductGrid
  > 156 |           products={mockProducts.slice(0, 10)}
        |                   ^
    157 |           language="en"
    158 |         />
    159 |       );
ERROR in src/tests/performance.test.ts:156:33
TS1005: ',' expected.
    154 |       const { rerender } = render(
    155 |         <OptimizedProductGrid
  > 156 |           products={mockProducts.slice(0, 10)}
        |                                 ^
    157 |           language="en"
    158 |         />
    159 |       );
ERROR in src/tests/performance.test.ts:157:11
TS1005: ',' expected.
    155 |         <OptimizedProductGrid
    156 |           products={mockProducts.slice(0, 10)}
  > 157 |           language="en"
        |           ^^^^^^^^
    158 |         />
    159 |       );
    160 |
ERROR in src/tests/performance.test.ts:157:11
TS2304: Cannot find name 'language'.
    155 |         <OptimizedProductGrid
    156 |           products={mockProducts.slice(0, 10)}
  > 157 |           language="en"
        |           ^^^^^^^^
    158 |         />
    159 |       );
    160 |
ERROR in src/tests/performance.test.ts:157:11
TS2554: Expected 1-2 arguments, but got 3.
    155 |         <OptimizedProductGrid
    156 |           products={mockProducts.slice(0, 10)}
  > 157 |           language="en"
        |           ^^^^^^^^^^^^^
  > 158 |         />
        | ^^^^^^^^^^^
    159 |       );
    160 |
    161 |       // Re-render with same props should not cause re-render
ERROR in src/tests/performance.test.ts:157:20
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    155 |         <OptimizedProductGrid
    156 |           products={mockProducts.slice(0, 10)}
  > 157 |           language="en"
        |                    ^^^^
    158 |         />
    159 |       );
    160 |
ERROR in src/tests/performance.test.ts:158:10
TS1109: Expression expected.
    156 |           products={mockProducts.slice(0, 10)}
    157 |           language="en"
  > 158 |         />
        |          ^
    159 |       );
    160 |
    161 |       // Re-render with same props should not cause re-render
ERROR in src/tests/performance.test.ts:159:7
TS1109: Expression expected.
    157 |           language="en"
    158 |         />
  > 159 |       );
        |       ^
    160 |
    161 |       // Re-render with same props should not cause re-render
    162 |       const renderTime = measureRenderTime(() => {
ERROR in src/tests/performance.test.ts:164:12
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    162 |       const renderTime = measureRenderTime(() => {
    163 |         rerender(
  > 164 |           <OptimizedProductGrid
        |            ^^^^^^^^^^^^^^^^^^^^
    165 |             products={mockProducts.slice(0, 10)}
    166 |             language="en"
    167 |           />
ERROR in src/tests/performance.test.ts:165:13
TS1005: '>' expected.
    163 |         rerender(
    164 |           <OptimizedProductGrid
  > 165 |             products={mockProducts.slice(0, 10)}
        |             ^^^^^^^^
    166 |             language="en"
    167 |           />
    168 |         );
ERROR in src/tests/performance.test.ts:165:13
TS2304: Cannot find name 'products'.
    163 |         rerender(
    164 |           <OptimizedProductGrid
  > 165 |             products={mockProducts.slice(0, 10)}
        |             ^^^^^^^^
    166 |             language="en"
    167 |           />
    168 |         );
ERROR in src/tests/performance.test.ts:165:21
TS1005: ',' expected.
    163 |         rerender(
    164 |           <OptimizedProductGrid
  > 165 |             products={mockProducts.slice(0, 10)}
        |                     ^
    166 |             language="en"
    167 |           />
    168 |         );
ERROR in src/tests/performance.test.ts:165:22
TS2554: Expected 1 arguments, but got 3.
    163 |         rerender(
    164 |           <OptimizedProductGrid
  > 165 |             products={mockProducts.slice(0, 10)}
        |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 166 |             language="en"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 167 |           />
        | ^^^^^^^^^^^^^
    168 |         );
    169 |       });
    170 |
ERROR in src/tests/performance.test.ts:165:35
TS1005: ',' expected.
    163 |         rerender(
    164 |           <OptimizedProductGrid
  > 165 |             products={mockProducts.slice(0, 10)}
        |                                   ^
    166 |             language="en"
    167 |           />
    168 |         );
ERROR in src/tests/performance.test.ts:166:13
TS1005: ',' expected.
    164 |           <OptimizedProductGrid
    165 |             products={mockProducts.slice(0, 10)}
  > 166 |             language="en"
        |             ^^^^^^^^
    167 |           />
    168 |         );
    169 |       });
ERROR in src/tests/performance.test.ts:166:13
TS2304: Cannot find name 'language'.
    164 |           <OptimizedProductGrid
    165 |             products={mockProducts.slice(0, 10)}
  > 166 |             language="en"
        |             ^^^^^^^^
    167 |           />
    168 |         );
    169 |       });
ERROR in src/tests/performance.test.ts:166:22
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    164 |           <OptimizedProductGrid
    165 |             products={mockProducts.slice(0, 10)}
  > 166 |             language="en"
        |                      ^^^^
    167 |           />
    168 |         );
    169 |       });
ERROR in src/tests/performance.test.ts:167:12
TS1109: Expression expected.
    165 |             products={mockProducts.slice(0, 10)}
    166 |             language="en"
  > 167 |           />
        |            ^
    168 |         );
    169 |       });
    170 |
ERROR in src/tests/performance.test.ts:168:9
TS1109: Expression expected.
    166 |             language="en"
    167 |           />
  > 168 |         );
        |         ^
    169 |       });
    170 |
    171 |       // Memoized component should render very quickly on subsequent renders
ERROR in src/tests/performance.test.ts:179:10
TS2749: 'OptimizedMenuProductCard' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedMenuProductCard'?
    177 |       
    178 |       const { rerender } = render(
  > 179 |         <OptimizedMenuProductCard
        |          ^^^^^^^^^^^^^^^^^^^^^^^^
    180 |           product={product}
    181 |           language="en"
    182 |         />
ERROR in src/tests/performance.test.ts:180:11
TS1005: '>' expected.
    178 |       const { rerender } = render(
    179 |         <OptimizedMenuProductCard
  > 180 |           product={product}
        |           ^^^^^^^
    181 |           language="en"
    182 |         />
    183 |       );
ERROR in src/tests/performance.test.ts:180:18
TS1005: ',' expected.
    178 |       const { rerender } = render(
    179 |         <OptimizedMenuProductCard
  > 180 |           product={product}
        |                  ^
    181 |           language="en"
    182 |         />
    183 |       );
ERROR in src/tests/performance.test.ts:181:11
TS1005: ',' expected.
    179 |         <OptimizedMenuProductCard
    180 |           product={product}
  > 181 |           language="en"
        |           ^^^^^^^^
    182 |         />
    183 |       );
    184 |
ERROR in src/tests/performance.test.ts:181:11
TS2304: Cannot find name 'language'.
    179 |         <OptimizedMenuProductCard
    180 |           product={product}
  > 181 |           language="en"
        |           ^^^^^^^^
    182 |         />
    183 |       );
    184 |
ERROR in src/tests/performance.test.ts:181:11
TS2554: Expected 1-2 arguments, but got 3.
    179 |         <OptimizedMenuProductCard
    180 |           product={product}
  > 181 |           language="en"
        |           ^^^^^^^^^^^^^
  > 182 |         />
        | ^^^^^^^^^^^
    183 |       );
    184 |
    185 |       // Same props should not re-render
ERROR in src/tests/performance.test.ts:181:20
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    179 |         <OptimizedMenuProductCard
    180 |           product={product}
  > 181 |           language="en"
        |                    ^^^^
    182 |         />
    183 |       );
    184 |
ERROR in src/tests/performance.test.ts:182:10
TS1109: Expression expected.
    180 |           product={product}
    181 |           language="en"
  > 182 |         />
        |          ^
    183 |       );
    184 |
    185 |       // Same props should not re-render
ERROR in src/tests/performance.test.ts:183:7
TS1109: Expression expected.
    181 |           language="en"
    182 |         />
  > 183 |       );
        |       ^
    184 |
    185 |       // Same props should not re-render
    186 |       const renderTime1 = measureRenderTime(() => {
ERROR in src/tests/performance.test.ts:188:12
TS2749: 'OptimizedMenuProductCard' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedMenuProductCard'?
    186 |       const renderTime1 = measureRenderTime(() => {
    187 |         rerender(
  > 188 |           <OptimizedMenuProductCard
        |            ^^^^^^^^^^^^^^^^^^^^^^^^
    189 |             product={product}
    190 |             language="en"
    191 |           />
ERROR in src/tests/performance.test.ts:189:13
TS1005: '>' expected.
    187 |         rerender(
    188 |           <OptimizedMenuProductCard
  > 189 |             product={product}
        |             ^^^^^^^
    190 |             language="en"
    191 |           />
    192 |         );
ERROR in src/tests/performance.test.ts:189:20
TS1005: ',' expected.
    187 |         rerender(
    188 |           <OptimizedMenuProductCard
  > 189 |             product={product}
        |                    ^
    190 |             language="en"
    191 |           />
    192 |         );
ERROR in src/tests/performance.test.ts:189:21
TS2554: Expected 1 arguments, but got 3.
    187 |         rerender(
    188 |           <OptimizedMenuProductCard
  > 189 |             product={product}
        |                     ^^^^^^^^^
  > 190 |             language="en"
        | ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 191 |           />
        | ^^^^^^^^^^^^^
    192 |         );
    193 |       });
    194 |
ERROR in src/tests/performance.test.ts:190:13
TS1005: ',' expected.
    188 |           <OptimizedMenuProductCard
    189 |             product={product}
  > 190 |             language="en"
        |             ^^^^^^^^
    191 |           />
    192 |         );
    193 |       });
ERROR in src/tests/performance.test.ts:190:13
TS2304: Cannot find name 'language'.
    188 |           <OptimizedMenuProductCard
    189 |             product={product}
  > 190 |             language="en"
        |             ^^^^^^^^
    191 |           />
    192 |         );
    193 |       });
ERROR in src/tests/performance.test.ts:190:22
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    188 |           <OptimizedMenuProductCard
    189 |             product={product}
  > 190 |             language="en"
        |                      ^^^^
    191 |           />
    192 |         );
    193 |       });
ERROR in src/tests/performance.test.ts:191:12
TS1109: Expression expected.
    189 |             product={product}
    190 |             language="en"
  > 191 |           />
        |            ^
    192 |         );
    193 |       });
    194 |
ERROR in src/tests/performance.test.ts:192:9
TS1109: Expression expected.
    190 |             language="en"
    191 |           />
  > 192 |         );
        |         ^
    193 |       });
    194 |
    195 |       // Different props should re-render
ERROR in src/tests/performance.test.ts:198:12
TS2749: 'OptimizedMenuProductCard' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedMenuProductCard'?
    196 |       const renderTime2 = measureRenderTime(() => {
    197 |         rerender(
  > 198 |           <OptimizedMenuProductCard
        |            ^^^^^^^^^^^^^^^^^^^^^^^^
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
    200 |             language="en"
    201 |           />
ERROR in src/tests/performance.test.ts:199:13
TS1005: '>' expected.
    197 |         rerender(
    198 |           <OptimizedMenuProductCard
  > 199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
        |             ^^^^^^^
    200 |             language="en"
    201 |           />
    202 |         );
ERROR in src/tests/performance.test.ts:199:20
TS1005: ',' expected.
    197 |         rerender(
    198 |           <OptimizedMenuProductCard
  > 199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
        |                    ^
    200 |             language="en"
    201 |           />
    202 |         );
ERROR in src/tests/performance.test.ts:199:21
TS2554: Expected 1 arguments, but got 3.
    197 |         rerender(
    198 |           <OptimizedMenuProductCard
  > 199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
        |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    200 |             language="en"
    201 |           />
    202 |         );
ERROR in src/tests/performance.test.ts:199:22
TS1136: Property assignment expected.
    197 |         rerender(
    198 |           <OptimizedMenuProductCard
  > 199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
        |                      ^
    200 |             language="en"
    201 |           />
    202 |         );
ERROR in src/tests/performance.test.ts:199:78
TS1005: ',' expected.
    197 |         rerender(
    198 |           <OptimizedMenuProductCard
  > 199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
        |                                                                              ^
    200 |             language="en"
    201 |           />
    202 |         );
ERROR in src/tests/performance.test.ts:200:13
TS1005: ',' expected.
    198 |           <OptimizedMenuProductCard
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
  > 200 |             language="en"
        |             ^^^^^^^^
    201 |           />
    202 |         );
    203 |       });
ERROR in src/tests/performance.test.ts:200:13
TS2304: Cannot find name 'language'.
    198 |           <OptimizedMenuProductCard
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
  > 200 |             language="en"
        |             ^^^^^^^^
    201 |           />
    202 |         );
    203 |       });
ERROR in src/tests/performance.test.ts:200:13
TS2554: Expected 1 arguments, but got 2.
    198 |           <OptimizedMenuProductCard
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
  > 200 |             language="en"
        |             ^^^^^^^^^^^^^
  > 201 |           />
        | ^^^^^^^^^^^^^
    202 |         );
    203 |       });
    204 |
ERROR in src/tests/performance.test.ts:200:22
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    198 |           <OptimizedMenuProductCard
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
  > 200 |             language="en"
        |                      ^^^^
    201 |           />
    202 |         );
    203 |       });
ERROR in src/tests/performance.test.ts:201:12
TS1109: Expression expected.
    199 |             product={{ ...product, name: { ...product.name, en: 'Changed' } }}
    200 |             language="en"
  > 201 |           />
        |            ^
    202 |         );
    203 |       });
    204 |
ERROR in src/tests/performance.test.ts:202:9
TS1109: Expression expected.
    200 |             language="en"
    201 |           />
  > 202 |         );
        |         ^
    203 |       });
    204 |
    205 |       expect(renderTime1).toBeLessThan(5); // No re-render
ERROR in src/tests/performance.test.ts:205:14
TS2304: Cannot find name 'renderTime1'.
    203 |       });
    204 |
  > 205 |       expect(renderTime1).toBeLessThan(5); // No re-render
        |              ^^^^^^^^^^^
    206 |       expect(renderTime2).toBeGreaterThan(renderTime1); // Actual re-render
    207 |     });
    208 |   });
ERROR in src/tests/performance.test.ts:206:14
TS2304: Cannot find name 'renderTime2'.
    204 |
    205 |       expect(renderTime1).toBeLessThan(5); // No re-render
  > 206 |       expect(renderTime2).toBeGreaterThan(renderTime1); // Actual re-render
        |              ^^^^^^^^^^^
    207 |     });
    208 |   });
    209 |
ERROR in src/tests/performance.test.ts:206:43
TS2304: Cannot find name 'renderTime1'.
    204 |
    205 |       expect(renderTime1).toBeLessThan(5); // No re-render
  > 206 |       expect(renderTime2).toBeGreaterThan(renderTime1); // Actual re-render
        |                                           ^^^^^^^^^^^
    207 |     });
    208 |   });
    209 |
ERROR in src/tests/performance.test.ts:208:3
TS1128: Declaration or statement expected.
    206 |       expect(renderTime2).toBeGreaterThan(renderTime1); // Actual re-render
    207 |     });
  > 208 |   });
        |   ^
    209 |
    210 |   describe('Hook Performance', () => {
    211 |     test('useDebounce delays value updates correctly', async () => {
ERROR in src/tests/performance.test.ts:208:4
TS1128: Declaration or statement expected.
    206 |       expect(renderTime2).toBeGreaterThan(renderTime1); // Actual re-render
    207 |     });
  > 208 |   });
        |    ^
    209 |
    210 |   describe('Hook Performance', () => {
    211 |     test('useDebounce delays value updates correctly', async () => {
ERROR in src/tests/performance.test.ts:213:12
TS7031: Binding element 'value' implicitly has an 'any' type.
    211 |     test('useDebounce delays value updates correctly', async () => {
    212 |       const { result, rerender } = renderHook(
  > 213 |         ({ value, delay }) => useDebounce(value, delay),
        |            ^^^^^
    214 |         { initialProps: { value: 'initial', delay: 100 } }
    215 |       );
    216 |
ERROR in src/tests/performance.test.ts:213:19
TS7031: Binding element 'delay' implicitly has an 'any' type.
    211 |     test('useDebounce delays value updates correctly', async () => {
    212 |       const { result, rerender } = renderHook(
  > 213 |         ({ value, delay }) => useDebounce(value, delay),
        |                   ^^^^^
    214 |         { initialProps: { value: 'initial', delay: 100 } }
    215 |       );
    216 |
ERROR in src/tests/performance.test.ts:290:10
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    288 |       
    289 |       const { unmount } = render(
  > 290 |         <OptimizedProductGrid
        |          ^^^^^^^^^^^^^^^^^^^^
    291 |           products={mockProducts.slice(0, 100)}
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
ERROR in src/tests/performance.test.ts:291:11
TS1005: '>' expected.
    289 |       const { unmount } = render(
    290 |         <OptimizedProductGrid
  > 291 |           products={mockProducts.slice(0, 100)}
        |           ^^^^^^^^
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
ERROR in src/tests/performance.test.ts:291:11
TS2304: Cannot find name 'products'.
    289 |       const { unmount } = render(
    290 |         <OptimizedProductGrid
  > 291 |           products={mockProducts.slice(0, 100)}
        |           ^^^^^^^^
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
ERROR in src/tests/performance.test.ts:291:19
TS1005: ',' expected.
    289 |       const { unmount } = render(
    290 |         <OptimizedProductGrid
  > 291 |           products={mockProducts.slice(0, 100)}
        |                   ^
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
ERROR in src/tests/performance.test.ts:291:33
TS1005: ',' expected.
    289 |       const { unmount } = render(
    290 |         <OptimizedProductGrid
  > 291 |           products={mockProducts.slice(0, 100)}
        |                                 ^
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
ERROR in src/tests/performance.test.ts:292:11
TS1005: ',' expected.
    290 |         <OptimizedProductGrid
    291 |           products={mockProducts.slice(0, 100)}
  > 292 |           language="en"
        |           ^^^^^^^^
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
    295 |       );
ERROR in src/tests/performance.test.ts:292:11
TS2304: Cannot find name 'language'.
    290 |         <OptimizedProductGrid
    291 |           products={mockProducts.slice(0, 100)}
  > 292 |           language="en"
        |           ^^^^^^^^
    293 |           performanceMonitoring={{ enabled: true }}
    294 |         />
    295 |       );
ERROR in src/tests/performance.test.ts:292:11
TS2554: Expected 1-2 arguments, but got 5.
    290 |         <OptimizedProductGrid
    291 |           products={mockProducts.slice(0, 100)}
  > 292 |           language="en"
        |           ^^^^^^^^^^^^^
  > 293 |           performanceMonitoring={{ enabled: true }}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    294 |         />
    295 |       );
    296 |
ERROR in src/tests/performance.test.ts:293:11
TS1005: ',' expected.
    291 |           products={mockProducts.slice(0, 100)}
    292 |           language="en"
  > 293 |           performanceMonitoring={{ enabled: true }}
        |           ^^^^^^^^^^^^^^^^^^^^^
    294 |         />
    295 |       );
    296 |
ERROR in src/tests/performance.test.ts:293:11
TS2304: Cannot find name 'performanceMonitoring'.
    291 |           products={mockProducts.slice(0, 100)}
    292 |           language="en"
  > 293 |           performanceMonitoring={{ enabled: true }}
        |           ^^^^^^^^^^^^^^^^^^^^^
    294 |         />
    295 |       );
    296 |
ERROR in src/tests/performance.test.ts:293:34
TS1136: Property assignment expected.
    291 |           products={mockProducts.slice(0, 100)}
    292 |           language="en"
  > 293 |           performanceMonitoring={{ enabled: true }}
        |                                  ^
    294 |         />
    295 |       );
    296 |
ERROR in src/tests/performance.test.ts:293:51
TS1005: ',' expected.
    291 |           products={mockProducts.slice(0, 100)}
    292 |           language="en"
  > 293 |           performanceMonitoring={{ enabled: true }}
        |                                                   ^
    294 |         />
    295 |       );
    296 |
ERROR in src/tests/performance.test.ts:294:9
TS1005: ',' expected.
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
  > 294 |         />
        |         ^
    295 |       );
    296 |
    297 |       unmount();
ERROR in src/tests/performance.test.ts:294:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    292 |           language="en"
    293 |           performanceMonitoring={{ enabled: true }}
  > 294 |         />
        |         ^^
    295 |       );
    296 |
    297 |       unmount();
ERROR in src/tests/performance.test.ts:297:7
TS2304: Cannot find name 'unmount'.
    295 |       );
    296 |
  > 297 |       unmount();
        |       ^^^^^^^
    298 |
    299 |       // Memory should not increase significantly after unmount
    300 |       const finalMemory = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:301:44
TS2304: Cannot find name 'initialMemory'.
    299 |       // Memory should not increase significantly after unmount
    300 |       const finalMemory = measureMemoryUsage();
  > 301 |       const memoryIncrease = finalMemory - initialMemory;
        |                                            ^^^^^^^^^^^^^
    302 |       
    303 |       expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
    304 |     });
ERROR in src/tests/performance.test.ts:308:10
TS2749: 'VirtualList' refers to a value, but is being used as a type here. Did you mean 'typeof VirtualList'?
    306 |     test('VirtualList maintains constant memory usage', () => {
    307 |       const { rerender } = render(
  > 308 |         <VirtualList
        |          ^^^^^^^^^^^
    309 |           items={mockProducts.slice(0, 100)}
    310 |           itemHeight={100}
    311 |           height="500px"
ERROR in src/tests/performance.test.ts:309:11
TS1005: '>' expected.
    307 |       const { rerender } = render(
    308 |         <VirtualList
  > 309 |           items={mockProducts.slice(0, 100)}
        |           ^^^^^
    310 |           itemHeight={100}
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:309:11
TS2304: Cannot find name 'items'.
    307 |       const { rerender } = render(
    308 |         <VirtualList
  > 309 |           items={mockProducts.slice(0, 100)}
        |           ^^^^^
    310 |           itemHeight={100}
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:309:16
TS1005: ',' expected.
    307 |       const { rerender } = render(
    308 |         <VirtualList
  > 309 |           items={mockProducts.slice(0, 100)}
        |                ^
    310 |           itemHeight={100}
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:309:30
TS1005: ',' expected.
    307 |       const { rerender } = render(
    308 |         <VirtualList
  > 309 |           items={mockProducts.slice(0, 100)}
        |                              ^
    310 |           itemHeight={100}
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:310:11
TS1005: ',' expected.
    308 |         <VirtualList
    309 |           items={mockProducts.slice(0, 100)}
  > 310 |           itemHeight={100}
        |           ^^^^^^^^^^
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
ERROR in src/tests/performance.test.ts:310:11
TS2304: Cannot find name 'itemHeight'.
    308 |         <VirtualList
    309 |           items={mockProducts.slice(0, 100)}
  > 310 |           itemHeight={100}
        |           ^^^^^^^^^^
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
ERROR in src/tests/performance.test.ts:310:11
TS2554: Expected 1-2 arguments, but got 5.
    308 |         <VirtualList
    309 |           items={mockProducts.slice(0, 100)}
  > 310 |           itemHeight={100}
        |           ^^^^^^^^^^^^^^^^
  > 311 |           height="500px"
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:310:26
TS1005: ':' expected.
    308 |         <VirtualList
    309 |           items={mockProducts.slice(0, 100)}
  > 310 |           itemHeight={100}
        |                          ^
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
ERROR in src/tests/performance.test.ts:311:11
TS1005: ',' expected.
    309 |           items={mockProducts.slice(0, 100)}
    310 |           itemHeight={100}
  > 311 |           height="500px"
        |           ^^^^^^
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
    314 |       );
ERROR in src/tests/performance.test.ts:311:11
TS2304: Cannot find name 'height'.
    309 |           items={mockProducts.slice(0, 100)}
    310 |           itemHeight={100}
  > 311 |           height="500px"
        |           ^^^^^^
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
    314 |       );
ERROR in src/tests/performance.test.ts:312:11
TS1005: ',' expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |           ^^^^^^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:11
TS2304: Cannot find name 'renderItem'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |           ^^^^^^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:22
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                      ^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:23
TS1136: Property assignment expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                       ^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:24
TS2304: Cannot find name 'item'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                        ^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:30
TS2304: Cannot find name 'index'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                              ^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:37
TS2304: Cannot find name 'style'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                     ^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:44
TS1005: ',' expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                            ^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:48
TS2304: Cannot find name 'div'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                ^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:52
TS1005: '>' expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                    ^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:52
TS2304: Cannot find name 'key'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                    ^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:55
TS1005: ';' expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                       ^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:57
TS2304: Cannot find name 'item'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                         ^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:66
TS2304: Cannot find name 'style'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                  ^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:72
TS2365: Operator '>' cannot be applied to types '{ style: any; }' and '{ item: any; "": any; }'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                        ^^^^^^^^^^^^^^^^^^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:72
TS2365: Operator '<' cannot be applied to types 'boolean' and 'number'.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 313 |         />
        | ^^^^^^^^^^
    314 |       );
    315 |
    316 |       const memory1 = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:312:73
TS18004: No value exists in scope for the shorthand property 'style'. Either declare one or provide an initializer.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                         ^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:81
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                 ^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:85
TS1005: ',' expected.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                     ^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:312:95
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    310 |           itemHeight={100}
    311 |           height="500px"
  > 312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                               ^^^^^^
    313 |         />
    314 |       );
    315 |
ERROR in src/tests/performance.test.ts:313:10
TS1109: Expression expected.
    311 |           height="500px"
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
  > 313 |         />
        |          ^
    314 |       );
    315 |
    316 |       const memory1 = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:314:7
TS1109: Expression expected.
    312 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    313 |         />
  > 314 |       );
        |       ^
    315 |
    316 |       const memory1 = measureMemoryUsage();
    317 |
ERROR in src/tests/performance.test.ts:319:7
TS2552: Cannot find name 'rerender'. Did you mean 'render'?
    317 |
    318 |       // Increase dataset size significantly
  > 319 |       rerender(
        |       ^^^^^^^^
    320 |         <VirtualList
    321 |           items={mockProducts}
    322 |           itemHeight={100}
ERROR in src/tests/performance.test.ts:320:10
TS2749: 'VirtualList' refers to a value, but is being used as a type here. Did you mean 'typeof VirtualList'?
    318 |       // Increase dataset size significantly
    319 |       rerender(
  > 320 |         <VirtualList
        |          ^^^^^^^^^^^
    321 |           items={mockProducts}
    322 |           itemHeight={100}
    323 |           height="500px"
ERROR in src/tests/performance.test.ts:321:11
TS1005: '>' expected.
    319 |       rerender(
    320 |         <VirtualList
  > 321 |           items={mockProducts}
        |           ^^^^^
    322 |           itemHeight={100}
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:321:11
TS2304: Cannot find name 'items'.
    319 |       rerender(
    320 |         <VirtualList
  > 321 |           items={mockProducts}
        |           ^^^^^
    322 |           itemHeight={100}
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:321:16
TS1005: ',' expected.
    319 |       rerender(
    320 |         <VirtualList
  > 321 |           items={mockProducts}
        |                ^
    322 |           itemHeight={100}
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
ERROR in src/tests/performance.test.ts:322:11
TS1005: ',' expected.
    320 |         <VirtualList
    321 |           items={mockProducts}
  > 322 |           itemHeight={100}
        |           ^^^^^^^^^^
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
ERROR in src/tests/performance.test.ts:322:11
TS2304: Cannot find name 'itemHeight'.
    320 |         <VirtualList
    321 |           items={mockProducts}
  > 322 |           itemHeight={100}
        |           ^^^^^^^^^^
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
ERROR in src/tests/performance.test.ts:322:26
TS1005: ':' expected.
    320 |         <VirtualList
    321 |           items={mockProducts}
  > 322 |           itemHeight={100}
        |                          ^
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
ERROR in src/tests/performance.test.ts:323:11
TS1005: ',' expected.
    321 |           items={mockProducts}
    322 |           itemHeight={100}
  > 323 |           height="500px"
        |           ^^^^^^
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
    326 |       );
ERROR in src/tests/performance.test.ts:323:11
TS2304: Cannot find name 'height'.
    321 |           items={mockProducts}
    322 |           itemHeight={100}
  > 323 |           height="500px"
        |           ^^^^^^
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
    326 |       );
ERROR in src/tests/performance.test.ts:324:11
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |           ^^^^^^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:11
TS2304: Cannot find name 'renderItem'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |           ^^^^^^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:22
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                      ^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:23
TS1136: Property assignment expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                       ^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:24
TS2304: Cannot find name 'item'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                        ^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:30
TS2304: Cannot find name 'index'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                              ^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:37
TS2304: Cannot find name 'style'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                     ^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:44
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                            ^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:48
TS2304: Cannot find name 'div'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                ^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:52
TS1005: '>' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                    ^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:52
TS2304: Cannot find name 'key'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                    ^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:55
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                       ^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:57
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                         ^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:61
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                             ^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:66
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                  ^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:66
TS2304: Cannot find name 'style'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                  ^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:72
TS2365: Operator '>' cannot be applied to types '{ style: any; }' and '{ item: any; "": any; }'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                        ^^^^^^^^^^^^^^^^^^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:72
TS2365: Operator '<' cannot be applied to types 'boolean' and 'number'.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 325 |         />
        | ^^^^^^^^^^
    326 |       );
    327 |
    328 |       const memory2 = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:324:73
TS18004: No value exists in scope for the shorthand property 'style'. Either declare one or provide an initializer.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                         ^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:81
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                 ^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:85
TS1005: ',' expected.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                     ^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:324:95
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    322 |           itemHeight={100}
    323 |           height="500px"
  > 324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
        |                                                                                               ^^^^^^
    325 |         />
    326 |       );
    327 |
ERROR in src/tests/performance.test.ts:325:10
TS1109: Expression expected.
    323 |           height="500px"
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
  > 325 |         />
        |          ^
    326 |       );
    327 |
    328 |       const memory2 = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:326:7
TS1109: Expression expected.
    324 |           renderItem={(item, index, style) => <div key={item.id} style={style}>{item.name.en}</div>}
    325 |         />
  > 326 |       );
        |       ^
    327 |
    328 |       const memory2 = measureMemoryUsage();
    329 |       const memoryIncrease = memory2 - memory1;
ERROR in src/tests/performance.test.ts:329:13
TS2451: Cannot redeclare block-scoped variable 'memoryIncrease'.
    327 |
    328 |       const memory2 = measureMemoryUsage();
  > 329 |       const memoryIncrease = memory2 - memory1;
        |             ^^^^^^^^^^^^^^
    330 |
    331 |       // Memory increase should be minimal despite 10x more data
    332 |       expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase
ERROR in src/tests/performance.test.ts:333:5
TS1128: Declaration or statement expected.
    331 |       // Memory increase should be minimal despite 10x more data
    332 |       expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase
  > 333 |     });
        |     ^
    334 |   });
    335 |
    336 |   describe('Performance Monitoring', () => {
ERROR in src/tests/performance.test.ts:333:6
TS1128: Declaration or statement expected.
    331 |       // Memory increase should be minimal despite 10x more data
    332 |       expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase
  > 333 |     });
        |      ^
    334 |   });
    335 |
    336 |   describe('Performance Monitoring', () => {
ERROR in src/tests/performance.test.ts:334:3
TS1128: Declaration or statement expected.
    332 |       expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase
    333 |     });
  > 334 |   });
        |   ^
    335 |
    336 |   describe('Performance Monitoring', () => {
    337 |     test('Performance monitor tracks metrics correctly', () => {
ERROR in src/tests/performance.test.ts:334:4
TS1128: Declaration or statement expected.
    332 |       expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase
    333 |     });
  > 334 |   });
        |    ^
    335 |
    336 |   describe('Performance Monitoring', () => {
    337 |     test('Performance monitor tracks metrics correctly', () => {
ERROR in src/tests/performance.test.ts:399:10
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    397 |       
    398 |       render(
  > 399 |         <OptimizedProductGrid
        |          ^^^^^^^^^^^^^^^^^^^^
    400 |           products={mockProducts}
    401 |           language="en"
    402 |           sortOptions={{
ERROR in src/tests/performance.test.ts:400:11
TS1005: '>' expected.
    398 |       render(
    399 |         <OptimizedProductGrid
  > 400 |           products={mockProducts}
        |           ^^^^^^^^
    401 |           language="en"
    402 |           sortOptions={{
    403 |             field: 'name',
ERROR in src/tests/performance.test.ts:400:11
TS2304: Cannot find name 'products'.
    398 |       render(
    399 |         <OptimizedProductGrid
  > 400 |           products={mockProducts}
        |           ^^^^^^^^
    401 |           language="en"
    402 |           sortOptions={{
    403 |             field: 'name',
ERROR in src/tests/performance.test.ts:400:19
TS1005: ',' expected.
    398 |       render(
    399 |         <OptimizedProductGrid
  > 400 |           products={mockProducts}
        |                   ^
    401 |           language="en"
    402 |           sortOptions={{
    403 |             field: 'name',
ERROR in src/tests/performance.test.ts:401:11
TS1005: ',' expected.
    399 |         <OptimizedProductGrid
    400 |           products={mockProducts}
  > 401 |           language="en"
        |           ^^^^^^^^
    402 |           sortOptions={{
    403 |             field: 'name',
    404 |             direction: 'asc',
ERROR in src/tests/performance.test.ts:401:11
TS2304: Cannot find name 'language'.
    399 |         <OptimizedProductGrid
    400 |           products={mockProducts}
  > 401 |           language="en"
        |           ^^^^^^^^
    402 |           sortOptions={{
    403 |             field: 'name',
    404 |             direction: 'asc',
ERROR in src/tests/performance.test.ts:401:11
TS2554: Expected 1-2 arguments, but got 5.
    399 |         <OptimizedProductGrid
    400 |           products={mockProducts}
  > 401 |           language="en"
        |           ^^^^^^^^^^^^^
  > 402 |           sortOptions={{
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 403 |             field: 'name',
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 404 |             direction: 'asc',
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 405 |             onSortChange: searchCallback
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 406 |           }}
        | ^^^^^^^^^^^^
    407 |         />
    408 |       );
    409 |
ERROR in src/tests/performance.test.ts:402:11
TS1005: ',' expected.
    400 |           products={mockProducts}
    401 |           language="en"
  > 402 |           sortOptions={{
        |           ^^^^^^^^^^^
    403 |             field: 'name',
    404 |             direction: 'asc',
    405 |             onSortChange: searchCallback
ERROR in src/tests/performance.test.ts:402:11
TS2304: Cannot find name 'sortOptions'.
    400 |           products={mockProducts}
    401 |           language="en"
  > 402 |           sortOptions={{
        |           ^^^^^^^^^^^
    403 |             field: 'name',
    404 |             direction: 'asc',
    405 |             onSortChange: searchCallback
ERROR in src/tests/performance.test.ts:402:24
TS1136: Property assignment expected.
    400 |           products={mockProducts}
    401 |           language="en"
  > 402 |           sortOptions={{
        |                        ^
    403 |             field: 'name',
    404 |             direction: 'asc',
    405 |             onSortChange: searchCallback
ERROR in src/tests/performance.test.ts:406:12
TS1005: ',' expected.
    404 |             direction: 'asc',
    405 |             onSortChange: searchCallback
  > 406 |           }}
        |            ^
    407 |         />
    408 |       );
    409 |
ERROR in src/tests/performance.test.ts:407:9
TS1005: ',' expected.
    405 |             onSortChange: searchCallback
    406 |           }}
  > 407 |         />
        |         ^
    408 |       );
    409 |
    410 |       const searchInput = screen.getByRole('combobox', { name: /sort/i });
ERROR in src/tests/performance.test.ts:407:9
TS2345: Argument of type 'RegExp' is not assignable to parameter of type 'number'.
    405 |             onSortChange: searchCallback
    406 |           }}
  > 407 |         />
        |         ^^
    408 |       );
    409 |
    410 |       const searchInput = screen.getByRole('combobox', { name: /sort/i });
ERROR in src/tests/performance.test.ts:428:10
TS2749: 'VirtualList' refers to a value, but is being used as a type here. Did you mean 'typeof VirtualList'?
    426 |     test('Virtual scrolling maintains smooth performance', async () => {
    427 |       const { container } = render(
  > 428 |         <VirtualList
        |          ^^^^^^^^^^^
    429 |           items={mockProducts}
    430 |           itemHeight={100}
    431 |           height="500px"
ERROR in src/tests/performance.test.ts:429:11
TS1005: '>' expected.
    427 |       const { container } = render(
    428 |         <VirtualList
  > 429 |           items={mockProducts}
        |           ^^^^^
    430 |           itemHeight={100}
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
ERROR in src/tests/performance.test.ts:429:11
TS2304: Cannot find name 'items'.
    427 |       const { container } = render(
    428 |         <VirtualList
  > 429 |           items={mockProducts}
        |           ^^^^^
    430 |           itemHeight={100}
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
ERROR in src/tests/performance.test.ts:429:16
TS1005: ',' expected.
    427 |       const { container } = render(
    428 |         <VirtualList
  > 429 |           items={mockProducts}
        |                ^
    430 |           itemHeight={100}
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
ERROR in src/tests/performance.test.ts:430:11
TS1005: ',' expected.
    428 |         <VirtualList
    429 |           items={mockProducts}
  > 430 |           itemHeight={100}
        |           ^^^^^^^^^^
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
ERROR in src/tests/performance.test.ts:430:11
TS2304: Cannot find name 'itemHeight'.
    428 |         <VirtualList
    429 |           items={mockProducts}
  > 430 |           itemHeight={100}
        |           ^^^^^^^^^^
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
ERROR in src/tests/performance.test.ts:430:11
TS2554: Expected 1-2 arguments, but got 5.
    428 |         <VirtualList
    429 |           items={mockProducts}
  > 430 |           itemHeight={100}
        |           ^^^^^^^^^^^^^^^^
  > 431 |           height="500px"
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 432 |           renderItem={(item, index, style) => (
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:430:26
TS1005: ':' expected.
    428 |         <VirtualList
    429 |           items={mockProducts}
  > 430 |           itemHeight={100}
        |                          ^
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
ERROR in src/tests/performance.test.ts:431:11
TS1005: ',' expected.
    429 |           items={mockProducts}
    430 |           itemHeight={100}
  > 431 |           height="500px"
        |           ^^^^^^
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
ERROR in src/tests/performance.test.ts:431:11
TS2304: Cannot find name 'height'.
    429 |           items={mockProducts}
    430 |           itemHeight={100}
  > 431 |           height="500px"
        |           ^^^^^^
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
ERROR in src/tests/performance.test.ts:432:11
TS1005: ',' expected.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |           ^^^^^^^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:11
TS2304: Cannot find name 'renderItem'.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |           ^^^^^^^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:22
TS2349: This expression is not callable.
  Type '{}' has no call signatures.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                      ^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:23
TS1136: Property assignment expected.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                       ^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:24
TS2304: Cannot find name 'item'.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                        ^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:30
TS2304: Cannot find name 'index'.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                              ^^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:37
TS2304: Cannot find name 'style'.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                                     ^^^^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:432:44
TS1005: ',' expected.
    430 |           itemHeight={100}
    431 |           height="500px"
  > 432 |           renderItem={(item, index, style) => (
        |                                            ^^
    433 |             <div key={item.id} style={style}>
    434 |               {item.name.en}
    435 |             </div>
ERROR in src/tests/performance.test.ts:433:14
TS2304: Cannot find name 'div'.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |              ^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:18
TS1005: '>' expected.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                  ^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:18
TS2304: Cannot find name 'key'.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                  ^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:21
TS1005: ')' expected.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                     ^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:23
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                       ^^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:27
TS1005: ',' expected.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                           ^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:32
TS1005: ';' expected.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                                ^^^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:32
TS2304: Cannot find name 'style'.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                                ^^^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:433:38
TS2365: Operator '>' cannot be applied to types '{ style: any; }' and '{ item: any; "": any; }'.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                                      ^^^^^^^^
  > 434 |               {item.name.en}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    435 |             </div>
    436 |           )}
    437 |         />
ERROR in src/tests/performance.test.ts:433:38
TS2365: Operator '<' cannot be applied to types 'boolean' and 'RegExp'.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                                      ^^^^^^^^
  > 434 |               {item.name.en}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 435 |             </div>
        | ^^^^^^^^^^^^^^^^^^^
    436 |           )}
    437 |         />
    438 |       );
ERROR in src/tests/performance.test.ts:433:39
TS18004: No value exists in scope for the shorthand property 'style'. Either declare one or provide an initializer.
    431 |           height="500px"
    432 |           renderItem={(item, index, style) => (
  > 433 |             <div key={item.id} style={style}>
        |                                       ^^^^^
    434 |               {item.name.en}
    435 |             </div>
    436 |           )}
ERROR in src/tests/performance.test.ts:434:16
TS18004: No value exists in scope for the shorthand property 'item'. Either declare one or provide an initializer.
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
  > 434 |               {item.name.en}
        |                ^^^^
    435 |             </div>
    436 |           )}
    437 |         />
ERROR in src/tests/performance.test.ts:434:20
TS1005: ',' expected.
    432 |           renderItem={(item, index, style) => (
    433 |             <div key={item.id} style={style}>
  > 434 |               {item.name.en}
        |                    ^
    435 |             </div>
    436 |           )}
    437 |         />
ERROR in src/tests/performance.test.ts:436:11
TS1128: Declaration or statement expected.
    434 |               {item.name.en}
    435 |             </div>
  > 436 |           )}
        |           ^
    437 |         />
    438 |       );
    439 |
ERROR in src/tests/performance.test.ts:436:12
TS1128: Declaration or statement expected.
    434 |               {item.name.en}
    435 |             </div>
  > 436 |           )}
        |            ^
    437 |         />
    438 |       );
    439 |
ERROR in src/tests/performance.test.ts:438:7
TS1128: Declaration or statement expected.
    436 |           )}
    437 |         />
  > 438 |       );
        |       ^
    439 |
    440 |       const scrollContainer = container.firstChild as HTMLElement;
    441 |       
ERROR in src/tests/performance.test.ts:440:31
TS2304: Cannot find name 'container'.
    438 |       );
    439 |
  > 440 |       const scrollContainer = container.firstChild as HTMLElement;
        |                               ^^^^^^^^^
    441 |       
    442 |       const startTime = performance.now();
    443 |       
ERROR in src/tests/performance.test.ts:455:5
TS1128: Declaration or statement expected.
    453 |       // Scrolling should be very fast
    454 |       expect(scrollTime).toBeLessThan(50);
  > 455 |     });
        |     ^
    456 |   });
    457 |
    458 |   describe('Mobile Performance', () => {
ERROR in src/tests/performance.test.ts:455:6
TS1128: Declaration or statement expected.
    453 |       // Scrolling should be very fast
    454 |       expect(scrollTime).toBeLessThan(50);
  > 455 |     });
        |      ^
    456 |   });
    457 |
    458 |   describe('Mobile Performance', () => {
ERROR in src/tests/performance.test.ts:456:3
TS1128: Declaration or statement expected.
    454 |       expect(scrollTime).toBeLessThan(50);
    455 |     });
  > 456 |   });
        |   ^
    457 |
    458 |   describe('Mobile Performance', () => {
    459 |     test('Components perform well on simulated low-end device', () => {
ERROR in src/tests/performance.test.ts:456:4
TS1128: Declaration or statement expected.
    454 |       expect(scrollTime).toBeLessThan(50);
    455 |     });
  > 456 |   });
        |    ^
    457 |
    458 |   describe('Mobile Performance', () => {
    459 |     test('Components perform well on simulated low-end device', () => {
ERROR in src/tests/performance.test.ts:465:12
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    463 |       const renderTime = measureRenderTime(() => {
    464 |         render(
  > 465 |           <OptimizedProductGrid
        |            ^^^^^^^^^^^^^^^^^^^^
    466 |             products={mockProducts.slice(0, 50)}
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
ERROR in src/tests/performance.test.ts:466:13
TS1005: '>' expected.
    464 |         render(
    465 |           <OptimizedProductGrid
  > 466 |             products={mockProducts.slice(0, 50)}
        |             ^^^^^^^^
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
ERROR in src/tests/performance.test.ts:466:13
TS2304: Cannot find name 'products'.
    464 |         render(
    465 |           <OptimizedProductGrid
  > 466 |             products={mockProducts.slice(0, 50)}
        |             ^^^^^^^^
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
ERROR in src/tests/performance.test.ts:466:21
TS1005: ',' expected.
    464 |         render(
    465 |           <OptimizedProductGrid
  > 466 |             products={mockProducts.slice(0, 50)}
        |                     ^
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
ERROR in src/tests/performance.test.ts:466:35
TS1005: ',' expected.
    464 |         render(
    465 |           <OptimizedProductGrid
  > 466 |             products={mockProducts.slice(0, 50)}
        |                                   ^
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
ERROR in src/tests/performance.test.ts:467:13
TS1005: ',' expected.
    465 |           <OptimizedProductGrid
    466 |             products={mockProducts.slice(0, 50)}
  > 467 |             language="en"
        |             ^^^^^^^^
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
    470 |         );
ERROR in src/tests/performance.test.ts:467:13
TS2304: Cannot find name 'language'.
    465 |           <OptimizedProductGrid
    466 |             products={mockProducts.slice(0, 50)}
  > 467 |             language="en"
        |             ^^^^^^^^
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
    469 |           />
    470 |         );
ERROR in src/tests/performance.test.ts:467:13
TS2554: Expected 1-2 arguments, but got 5.
    465 |           <OptimizedProductGrid
    466 |             products={mockProducts.slice(0, 50)}
  > 467 |             language="en"
        |             ^^^^^^^^^^^^^
  > 468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    469 |           />
    470 |         );
    471 |       });
ERROR in src/tests/performance.test.ts:468:13
TS1005: ',' expected.
    466 |             products={mockProducts.slice(0, 50)}
    467 |             language="en"
  > 468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
        |             ^^^^^^
    469 |           />
    470 |         );
    471 |       });
ERROR in src/tests/performance.test.ts:468:13
TS2304: Cannot find name 'layout'.
    466 |             products={mockProducts.slice(0, 50)}
    467 |             language="en"
  > 468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
        |             ^^^^^^
    469 |           />
    470 |         );
    471 |       });
ERROR in src/tests/performance.test.ts:468:21
TS1136: Property assignment expected.
    466 |             products={mockProducts.slice(0, 50)}
    467 |             language="en"
  > 468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
        |                     ^
    469 |           />
    470 |         );
    471 |       });
ERROR in src/tests/performance.test.ts:468:44
TS1005: ',' expected.
    466 |             products={mockProducts.slice(0, 50)}
    467 |             language="en"
  > 468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
        |                                            ^
    469 |           />
    470 |         );
    471 |       });
ERROR in src/tests/performance.test.ts:469:11
TS1005: ',' expected.
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
  > 469 |           />
        |           ^
    470 |         );
    471 |       });
    472 |
ERROR in src/tests/performance.test.ts:469:11
TS2554: Expected 1 arguments, but got 2.
    467 |             language="en"
    468 |             layout={{ columns: 1, gap: 15 }} // Mobile layout
  > 469 |           />
        |           ^^
    470 |         );
    471 |       });
    472 |
ERROR in src/tests/performance.test.ts:473:14
TS2304: Cannot find name 'renderTime'.
    471 |       });
    472 |
  > 473 |       expect(renderTime).toBeLessThan(slowDeviceThreshold);
        |              ^^^^^^^^^^
    474 |     });
    475 |
    476 |     test('LazyImage optimizes for mobile bandwidth', () => {
ERROR in src/tests/performance.test.ts:473:39
TS2304: Cannot find name 'slowDeviceThreshold'.
    471 |       });
    472 |
  > 473 |       expect(renderTime).toBeLessThan(slowDeviceThreshold);
        |                                       ^^^^^^^^^^^^^^^^^^^
    474 |     });
    475 |
    476 |     test('LazyImage optimizes for mobile bandwidth', () => {
ERROR in src/tests/performance.test.ts:478:10
TS2749: 'LazyImage' refers to a value, but is being used as a type here. Did you mean 'typeof LazyImage'?
    476 |     test('LazyImage optimizes for mobile bandwidth', () => {
    477 |       const { container } = render(
  > 478 |         <LazyImage
        |          ^^^^^^^^^
    479 |           src="https://example.com/large-image.jpg"
    480 |           alt="Test"
    481 |           width={300}
ERROR in src/tests/performance.test.ts:479:11
TS1005: '>' expected.
    477 |       const { container } = render(
    478 |         <LazyImage
  > 479 |           src="https://example.com/large-image.jpg"
        |           ^^^
    480 |           alt="Test"
    481 |           width={300}
    482 |           height={200}
ERROR in src/tests/performance.test.ts:479:11
TS2304: Cannot find name 'src'.
    477 |       const { container } = render(
    478 |         <LazyImage
  > 479 |           src="https://example.com/large-image.jpg"
        |           ^^^
    480 |           alt="Test"
    481 |           width={300}
    482 |           height={200}
ERROR in src/tests/performance.test.ts:479:14
TS1005: ',' expected.
    477 |       const { container } = render(
    478 |         <LazyImage
  > 479 |           src="https://example.com/large-image.jpg"
        |              ^
    480 |           alt="Test"
    481 |           width={300}
    482 |           height={200}
ERROR in src/tests/performance.test.ts:480:11
TS1005: ',' expected.
    478 |         <LazyImage
    479 |           src="https://example.com/large-image.jpg"
  > 480 |           alt="Test"
        |           ^^^
    481 |           width={300}
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
ERROR in src/tests/performance.test.ts:480:11
TS2304: Cannot find name 'alt'.
    478 |         <LazyImage
    479 |           src="https://example.com/large-image.jpg"
  > 480 |           alt="Test"
        |           ^^^
    481 |           width={300}
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
ERROR in src/tests/performance.test.ts:480:11
TS2554: Expected 1-2 arguments, but got 7.
    478 |         <LazyImage
    479 |           src="https://example.com/large-image.jpg"
  > 480 |           alt="Test"
        |           ^^^^^^^^^^
  > 481 |           width={300}
        | ^^^^^^^^^^^^^^^^^^^^^
  > 482 |           height={200}
        | ^^^^^^^^^^^^^^^^^^^^^
  > 483 |           quality={70} // Lower quality for mobile
        | ^^^^^^^^^^^^^^^^^^^^^
  > 484 |           enableWebP={true}
        | ^^^^^^^^^^^^^^^^^^^^^
  > 485 |         />
        | ^^^^^^^^^^^
    486 |       );
    487 |
    488 |       // Should render placeholder immediately
ERROR in src/tests/performance.test.ts:481:11
TS1005: ',' expected.
    479 |           src="https://example.com/large-image.jpg"
    480 |           alt="Test"
  > 481 |           width={300}
        |           ^^^^^
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
ERROR in src/tests/performance.test.ts:481:11
TS2304: Cannot find name 'width'.
    479 |           src="https://example.com/large-image.jpg"
    480 |           alt="Test"
  > 481 |           width={300}
        |           ^^^^^
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
ERROR in src/tests/performance.test.ts:481:21
TS1005: ':' expected.
    479 |           src="https://example.com/large-image.jpg"
    480 |           alt="Test"
  > 481 |           width={300}
        |                     ^
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
ERROR in src/tests/performance.test.ts:482:11
TS1005: ',' expected.
    480 |           alt="Test"
    481 |           width={300}
  > 482 |           height={200}
        |           ^^^^^^
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
    485 |         />
ERROR in src/tests/performance.test.ts:482:11
TS2304: Cannot find name 'height'.
    480 |           alt="Test"
    481 |           width={300}
  > 482 |           height={200}
        |           ^^^^^^
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
    485 |         />
ERROR in src/tests/performance.test.ts:482:22
TS1005: ':' expected.
    480 |           alt="Test"
    481 |           width={300}
  > 482 |           height={200}
        |                      ^
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
    485 |         />
ERROR in src/tests/performance.test.ts:483:11
TS1005: ',' expected.
    481 |           width={300}
    482 |           height={200}
  > 483 |           quality={70} // Lower quality for mobile
        |           ^^^^^^^
    484 |           enableWebP={true}
    485 |         />
    486 |       );
ERROR in src/tests/performance.test.ts:483:11
TS2304: Cannot find name 'quality'.
    481 |           width={300}
    482 |           height={200}
  > 483 |           quality={70} // Lower quality for mobile
        |           ^^^^^^^
    484 |           enableWebP={true}
    485 |         />
    486 |       );
ERROR in src/tests/performance.test.ts:483:22
TS1005: ':' expected.
    481 |           width={300}
    482 |           height={200}
  > 483 |           quality={70} // Lower quality for mobile
        |                      ^
    484 |           enableWebP={true}
    485 |         />
    486 |       );
ERROR in src/tests/performance.test.ts:484:11
TS1005: ',' expected.
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
  > 484 |           enableWebP={true}
        |           ^^^^^^^^^^
    485 |         />
    486 |       );
    487 |
ERROR in src/tests/performance.test.ts:484:11
TS2304: Cannot find name 'enableWebP'.
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
  > 484 |           enableWebP={true}
        |           ^^^^^^^^^^
    485 |         />
    486 |       );
    487 |
ERROR in src/tests/performance.test.ts:484:22
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
  > 484 |           enableWebP={true}
        |                      ^^^^^^
    485 |         />
    486 |       );
    487 |
ERROR in src/tests/performance.test.ts:484:27
TS1005: ':' expected.
    482 |           height={200}
    483 |           quality={70} // Lower quality for mobile
  > 484 |           enableWebP={true}
        |                           ^
    485 |         />
    486 |       );
    487 |
ERROR in src/tests/performance.test.ts:485:10
TS1109: Expression expected.
    483 |           quality={70} // Lower quality for mobile
    484 |           enableWebP={true}
  > 485 |         />
        |          ^
    486 |       );
    487 |
    488 |       // Should render placeholder immediately
ERROR in src/tests/performance.test.ts:486:7
TS1109: Expression expected.
    484 |           enableWebP={true}
    485 |         />
  > 486 |       );
        |       ^
    487 |
    488 |       // Should render placeholder immediately
    489 |       expect(container.firstChild).toBeTruthy();
ERROR in src/tests/performance.test.ts:491:3
TS1128: Declaration or statement expected.
    489 |       expect(container.firstChild).toBeTruthy();
    490 |     });
  > 491 |   });
        |   ^
    492 | });
    493 |
    494 | // Integration tests for performance
ERROR in src/tests/performance.test.ts:491:4
TS1128: Declaration or statement expected.
    489 |       expect(container.firstChild).toBeTruthy();
    490 |     });
  > 491 |   });
        |    ^
    492 | });
    493 |
    494 | // Integration tests for performance
ERROR in src/tests/performance.test.ts:492:1
TS1128: Declaration or statement expected.
    490 |     });
    491 |   });
  > 492 | });
        | ^
    493 |
    494 | // Integration tests for performance
    495 | describe('Performance Integration Tests', () => {
ERROR in src/tests/performance.test.ts:492:2
TS1128: Declaration or statement expected.
    490 |     });
    491 |   });
  > 492 | });
        |  ^
    493 |
    494 | // Integration tests for performance
    495 | describe('Performance Integration Tests', () => {
ERROR in src/tests/performance.test.ts:500:8
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    498 |     
    499 |     render(
  > 500 |       <OptimizedProductGrid
        |        ^^^^^^^^^^^^^^^^^^^^
    501 |         products={mockProducts.slice(0, 200)}
    502 |         language="en"
    503 |         showControls={true}
ERROR in src/tests/performance.test.ts:501:9
TS1005: '>' expected.
    499 |     render(
    500 |       <OptimizedProductGrid
  > 501 |         products={mockProducts.slice(0, 200)}
        |         ^^^^^^^^
    502 |         language="en"
    503 |         showControls={true}
    504 |         virtualScrolling={{
ERROR in src/tests/performance.test.ts:501:9
TS2304: Cannot find name 'products'.
    499 |     render(
    500 |       <OptimizedProductGrid
  > 501 |         products={mockProducts.slice(0, 200)}
        |         ^^^^^^^^
    502 |         language="en"
    503 |         showControls={true}
    504 |         virtualScrolling={{
ERROR in src/tests/performance.test.ts:501:17
TS1005: ',' expected.
    499 |     render(
    500 |       <OptimizedProductGrid
  > 501 |         products={mockProducts.slice(0, 200)}
        |                 ^
    502 |         language="en"
    503 |         showControls={true}
    504 |         virtualScrolling={{
ERROR in src/tests/performance.test.ts:501:31
TS1005: ',' expected.
    499 |     render(
    500 |       <OptimizedProductGrid
  > 501 |         products={mockProducts.slice(0, 200)}
        |                               ^
    502 |         language="en"
    503 |         showControls={true}
    504 |         virtualScrolling={{
ERROR in src/tests/performance.test.ts:502:9
TS1005: ',' expected.
    500 |       <OptimizedProductGrid
    501 |         products={mockProducts.slice(0, 200)}
  > 502 |         language="en"
        |         ^^^^^^^^
    503 |         showControls={true}
    504 |         virtualScrolling={{
    505 |           enabled: true,
ERROR in src/tests/performance.test.ts:502:9
TS2304: Cannot find name 'language'.
    500 |       <OptimizedProductGrid
    501 |         products={mockProducts.slice(0, 200)}
  > 502 |         language="en"
        |         ^^^^^^^^
    503 |         showControls={true}
    504 |         virtualScrolling={{
    505 |           enabled: true,
ERROR in src/tests/performance.test.ts:502:9
TS2554: Expected 1-2 arguments, but got 6.
    500 |       <OptimizedProductGrid
    501 |         products={mockProducts.slice(0, 200)}
  > 502 |         language="en"
        |         ^^^^^^^^^^^^^
  > 503 |         showControls={true}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 504 |         virtualScrolling={{
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 505 |           enabled: true,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 506 |           itemHeight: 400,
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 507 |           containerHeight: '70vh'
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 508 |         }}
        | ^^^^^^^^^^
    509 |         performanceMonitoring={{
    510 |           enabled: true,
    511 |           showIndicator: false,
ERROR in src/tests/performance.test.ts:503:9
TS1005: ',' expected.
    501 |         products={mockProducts.slice(0, 200)}
    502 |         language="en"
  > 503 |         showControls={true}
        |         ^^^^^^^^^^^^
    504 |         virtualScrolling={{
    505 |           enabled: true,
    506 |           itemHeight: 400,
ERROR in src/tests/performance.test.ts:503:9
TS2304: Cannot find name 'showControls'.
    501 |         products={mockProducts.slice(0, 200)}
    502 |         language="en"
  > 503 |         showControls={true}
        |         ^^^^^^^^^^^^
    504 |         virtualScrolling={{
    505 |           enabled: true,
    506 |           itemHeight: 400,
ERROR in src/tests/performance.test.ts:503:27
TS1005: ':' expected.
    501 |         products={mockProducts.slice(0, 200)}
    502 |         language="en"
  > 503 |         showControls={true}
        |                           ^
    504 |         virtualScrolling={{
    505 |           enabled: true,
    506 |           itemHeight: 400,
ERROR in src/tests/performance.test.ts:504:9
TS1005: ',' expected.
    502 |         language="en"
    503 |         showControls={true}
  > 504 |         virtualScrolling={{
        |         ^^^^^^^^^^^^^^^^
    505 |           enabled: true,
    506 |           itemHeight: 400,
    507 |           containerHeight: '70vh'
ERROR in src/tests/performance.test.ts:504:9
TS2304: Cannot find name 'virtualScrolling'.
    502 |         language="en"
    503 |         showControls={true}
  > 504 |         virtualScrolling={{
        |         ^^^^^^^^^^^^^^^^
    505 |           enabled: true,
    506 |           itemHeight: 400,
    507 |           containerHeight: '70vh'
ERROR in src/tests/performance.test.ts:504:27
TS1136: Property assignment expected.
    502 |         language="en"
    503 |         showControls={true}
  > 504 |         virtualScrolling={{
        |                           ^
    505 |           enabled: true,
    506 |           itemHeight: 400,
    507 |           containerHeight: '70vh'
ERROR in src/tests/performance.test.ts:508:10
TS1005: ',' expected.
    506 |           itemHeight: 400,
    507 |           containerHeight: '70vh'
  > 508 |         }}
        |          ^
    509 |         performanceMonitoring={{
    510 |           enabled: true,
    511 |           showIndicator: false,
ERROR in src/tests/performance.test.ts:509:9
TS1005: ',' expected.
    507 |           containerHeight: '70vh'
    508 |         }}
  > 509 |         performanceMonitoring={{
        |         ^^^^^^^^^^^^^^^^^^^^^
    510 |           enabled: true,
    511 |           showIndicator: false,
    512 |           logMetrics: false
ERROR in src/tests/performance.test.ts:509:9
TS2304: Cannot find name 'performanceMonitoring'.
    507 |           containerHeight: '70vh'
    508 |         }}
  > 509 |         performanceMonitoring={{
        |         ^^^^^^^^^^^^^^^^^^^^^
    510 |           enabled: true,
    511 |           showIndicator: false,
    512 |           logMetrics: false
ERROR in src/tests/performance.test.ts:509:32
TS1136: Property assignment expected.
    507 |           containerHeight: '70vh'
    508 |         }}
  > 509 |         performanceMonitoring={{
        |                                ^
    510 |           enabled: true,
    511 |           showIndicator: false,
    512 |           logMetrics: false
ERROR in src/tests/performance.test.ts:509:32
TS2554: Expected 1-3 arguments, but got 4.
    507 |           containerHeight: '70vh'
    508 |         }}
  > 509 |         performanceMonitoring={{
        |                                ^
  > 510 |           enabled: true,
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 511 |           showIndicator: false,
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 512 |           logMetrics: false
        | ^^^^^^^^^^^^^^^^^^^^^^^^
  > 513 |         }}
        | ^^^^^^^^^^
    514 |       />
    515 |     );
    516 |
ERROR in src/tests/performance.test.ts:513:10
TS1005: ',' expected.
    511 |           showIndicator: false,
    512 |           logMetrics: false
  > 513 |         }}
        |          ^
    514 |       />
    515 |     );
    516 |
ERROR in src/tests/performance.test.ts:514:7
TS1005: ',' expected.
    512 |           logMetrics: false
    513 |         }}
  > 514 |       />
        |       ^
    515 |     );
    516 |
    517 |     await waitFor(() => {
ERROR in src/tests/performance.test.ts:514:7
TS2554: Expected 2 arguments, but got 3.
    512 |           logMetrics: false
    513 |         }}
  > 514 |       />
        |       ^^
    515 |     );
    516 |
    517 |     await waitFor(() => {
ERROR in src/tests/performance.test.ts:525:3
TS1128: Declaration or statement expected.
    523 |     // Complete page should load within 1 second
    524 |     expect(loadTime).toBeLessThan(1000);
  > 525 |   });
        |   ^
    526 |
    527 |   test('Memory usage remains stable during heavy interactions', async () => {
    528 |     const initialMemory = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:525:4
TS1128: Declaration or statement expected.
    523 |     // Complete page should load within 1 second
    524 |     expect(loadTime).toBeLessThan(1000);
  > 525 |   });
        |    ^
    526 |
    527 |   test('Memory usage remains stable during heavy interactions', async () => {
    528 |     const initialMemory = measureMemoryUsage();
ERROR in src/tests/performance.test.ts:531:8
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    529 |     
    530 |     const { rerender } = render(
  > 531 |       <OptimizedProductGrid
        |        ^^^^^^^^^^^^^^^^^^^^
    532 |         products={mockProducts.slice(0, 100)}
    533 |         language="en"
    534 |       />
ERROR in src/tests/performance.test.ts:532:9
TS1005: '>' expected.
    530 |     const { rerender } = render(
    531 |       <OptimizedProductGrid
  > 532 |         products={mockProducts.slice(0, 100)}
        |         ^^^^^^^^
    533 |         language="en"
    534 |       />
    535 |     );
ERROR in src/tests/performance.test.ts:532:9
TS2304: Cannot find name 'products'.
    530 |     const { rerender } = render(
    531 |       <OptimizedProductGrid
  > 532 |         products={mockProducts.slice(0, 100)}
        |         ^^^^^^^^
    533 |         language="en"
    534 |       />
    535 |     );
ERROR in src/tests/performance.test.ts:532:17
TS1005: ',' expected.
    530 |     const { rerender } = render(
    531 |       <OptimizedProductGrid
  > 532 |         products={mockProducts.slice(0, 100)}
        |                 ^
    533 |         language="en"
    534 |       />
    535 |     );
ERROR in src/tests/performance.test.ts:532:31
TS1005: ',' expected.
    530 |     const { rerender } = render(
    531 |       <OptimizedProductGrid
  > 532 |         products={mockProducts.slice(0, 100)}
        |                               ^
    533 |         language="en"
    534 |       />
    535 |     );
ERROR in src/tests/performance.test.ts:533:9
TS1005: ',' expected.
    531 |       <OptimizedProductGrid
    532 |         products={mockProducts.slice(0, 100)}
  > 533 |         language="en"
        |         ^^^^^^^^
    534 |       />
    535 |     );
    536 |
ERROR in src/tests/performance.test.ts:533:9
TS2304: Cannot find name 'language'.
    531 |       <OptimizedProductGrid
    532 |         products={mockProducts.slice(0, 100)}
  > 533 |         language="en"
        |         ^^^^^^^^
    534 |       />
    535 |     );
    536 |
ERROR in src/tests/performance.test.ts:533:9
TS2554: Expected 1-2 arguments, but got 3.
    531 |       <OptimizedProductGrid
    532 |         products={mockProducts.slice(0, 100)}
  > 533 |         language="en"
        |         ^^^^^^^^^^^^^
  > 534 |       />
        | ^^^^^^^^^
    535 |     );
    536 |
    537 |     // Simulate multiple re-renders and interactions
ERROR in src/tests/performance.test.ts:533:18
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    531 |       <OptimizedProductGrid
    532 |         products={mockProducts.slice(0, 100)}
  > 533 |         language="en"
        |                  ^^^^
    534 |       />
    535 |     );
    536 |
ERROR in src/tests/performance.test.ts:534:8
TS1109: Expression expected.
    532 |         products={mockProducts.slice(0, 100)}
    533 |         language="en"
  > 534 |       />
        |        ^
    535 |     );
    536 |
    537 |     // Simulate multiple re-renders and interactions
ERROR in src/tests/performance.test.ts:535:5
TS1109: Expression expected.
    533 |         language="en"
    534 |       />
  > 535 |     );
        |     ^
    536 |
    537 |     // Simulate multiple re-renders and interactions
    538 |     for (let i = 0; i < 10; i++) {
ERROR in src/tests/performance.test.ts:540:10
TS2749: 'OptimizedProductGrid' refers to a value, but is being used as a type here. Did you mean 'typeof OptimizedProductGrid'?
    538 |     for (let i = 0; i < 10; i++) {
    539 |       rerender(
  > 540 |         <OptimizedProductGrid
        |          ^^^^^^^^^^^^^^^^^^^^
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
ERROR in src/tests/performance.test.ts:541:11
TS1005: '>' expected.
    539 |       rerender(
    540 |         <OptimizedProductGrid
  > 541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
        |           ^^^^^^^^
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
    544 |       );
ERROR in src/tests/performance.test.ts:541:11
TS2304: Cannot find name 'products'.
    539 |       rerender(
    540 |         <OptimizedProductGrid
  > 541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
        |           ^^^^^^^^
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
    544 |       );
ERROR in src/tests/performance.test.ts:541:19
TS1005: ',' expected.
    539 |       rerender(
    540 |         <OptimizedProductGrid
  > 541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
        |                   ^
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
    544 |       );
ERROR in src/tests/performance.test.ts:541:20
TS2554: Expected 1 arguments, but got 3.
    539 |       rerender(
    540 |         <OptimizedProductGrid
  > 541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
        |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:541:33
TS1005: ',' expected.
    539 |       rerender(
    540 |         <OptimizedProductGrid
  > 541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
        |                                 ^
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
    544 |       );
ERROR in src/tests/performance.test.ts:542:11
TS1005: ',' expected.
    540 |         <OptimizedProductGrid
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        |           ^^^^^^^^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:542:11
TS2304: Cannot find name 'language'.
    540 |         <OptimizedProductGrid
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        |           ^^^^^^^^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:542:20
TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    540 |         <OptimizedProductGrid
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        |                    ^^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:542:23
TS1005: ',' expected.
    540 |         <OptimizedProductGrid
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        |                       ^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:542:46
TS1005: ',' expected.
    540 |         <OptimizedProductGrid
    541 |           products={mockProducts.slice(i * 10, (i + 1) * 10 + 100)}
  > 542 |           language={i % 2 === 0 ? 'en' : 'de'}
        |                                              ^
    543 |         />
    544 |       );
    545 |       
ERROR in src/tests/performance.test.ts:544:7
TS1128: Declaration or statement expected.
    542 |           language={i % 2 === 0 ? 'en' : 'de'}
    543 |         />
  > 544 |       );
        |       ^
    545 |       
    546 |       await new Promise(resolve => setTimeout(resolve, 10));
    547 |     }
ERROR in src/tests/performance.test.ts:547:5
TS1128: Declaration or statement expected.
    545 |       
    546 |       await new Promise(resolve => setTimeout(resolve, 10));
  > 547 |     }
        |     ^
    548 |
    549 |     const finalMemory = measureMemoryUsage();
    550 |     const memoryIncrease = finalMemory - initialMemory;
ERROR in src/tests/performance.test.ts:550:11
TS2451: Cannot redeclare block-scoped variable 'memoryIncrease'.
    548 |
    549 |     const finalMemory = measureMemoryUsage();
  > 550 |     const memoryIncrease = finalMemory - initialMemory;
        |           ^^^^^^^^^^^^^^
    551 |     
    552 |     // Memory increase should be reasonable
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
ERROR in src/tests/performance.test.ts:550:42
TS2304: Cannot find name 'initialMemory'.
    548 |
    549 |     const finalMemory = measureMemoryUsage();
  > 550 |     const memoryIncrease = finalMemory - initialMemory;
        |                                          ^^^^^^^^^^^^^
    551 |     
    552 |     // Memory increase should be reasonable
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
ERROR in src/tests/performance.test.ts:554:3
TS1128: Declaration or statement expected.
    552 |     // Memory increase should be reasonable
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
  > 554 |   });
        |   ^
    555 | });
    556 |
    557 | export {};
ERROR in src/tests/performance.test.ts:554:4
TS1128: Declaration or statement expected.
    552 |     // Memory increase should be reasonable
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
  > 554 |   });
        |    ^
    555 | });
    556 |
    557 | export {};
ERROR in src/tests/performance.test.ts:555:1
TS1128: Declaration or statement expected.
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
    554 |   });
  > 555 | });
        | ^
    556 |
    557 | export {};
ERROR in src/tests/performance.test.ts:555:2
TS1128: Declaration or statement expected.
    553 |     expect(memoryIncrease).toBeLessThan(PERFORMANCE_THRESHOLDS.MEMORY_WARNING);
    554 |   });
  > 555 | });
        |  ^
    556 |
    557 | export {};
ERROR in src/utils/lazy-loading.tsx:316:35
TS2322: Type '{ ref: ForwardedRef<any>; }' is not assignable to type 'IntrinsicAttributes'.
  Property 'ref' does not exist on type 'IntrinsicAttributes'.
    314 |         }
    315 |       >
  > 316 |         <LazyComponent {...props} ref={ref} />
        |                                   ^^^
    317 |       </Suspense>
    318 |     </LazyErrorBoundary>
    319 |   ));
ERROR in src/utils/lazy-loading.tsx:471:14
TS2322: Type '({ children, isLoading, loadingComponent }: { children: ReactNode; isLoading?: boolean | undefined; loadingComponent?: ReactNode; }) => string | number | true | Iterable<ReactNode> | Element' is not assignable to type 'FC<{ children: ReactNode; isLoading?: boolean | undefined; loadingComponent?: ReactNode; }>'.
  Type 'string | number | true | Iterable<ReactNode> | Element' is not assignable to type 'ReactElement<any, any> | null'.
    Type 'string' is not assignable to type 'ReactElement<any, any>'.
    469 |  * Route transition component with loading state
    470 |  */
  > 471 | export const RouteTransition: React.FC<{
        |              ^^^^^^^^^^^^^^^
    472 |   children: ReactNode;
    473 |   isLoading?: boolean;
    474 |   loadingComponent?: ReactNode;
ERROR in src/utils/performance.ts:212:22
TS2339: Property 'hadRecentInput' does not exist on type 'PerformanceEntry'.
    210 |       const observer = new PerformanceObserver((list) => {
    211 |         list.getEntries().forEach((entry) => {
  > 212 |           if (!entry.hadRecentInput) {
        |                      ^^^^^^^^^^^^^^
    213 |             clsValue += (entry as any).value;
    214 |           }
    215 |         });
ERROR in src/utils/performance.ts:363:30
TS2686: 'React' refers to a UMD global, but the current file is a module. Consider adding an import instead.
    361 |     componentName?: string
    362 |   ) => {
  > 363 |     const WrappedComponent = React.forwardRef<any, P>((props, ref) => {
        |                              ^^^^^
    364 |       const renderStartTime = useRef<number>(0);
    365 |       const name = componentName || Component.displayName || Component.name;
    366 |
ERROR in src/utils/performance.ts:378:14
TS2686: 'React' refers to a UMD global, but the current file is a module. Consider adding an import instead.
    376 |       });
    377 |
  > 378 |       return React.createElement(Component, { ...props, ref });
        |              ^^^^^
    379 |     });
    380 |
    381 |     WrappedComponent.displayName = `withPerformanceMonitoring(${name})`;
ERROR in src/utils/performance.ts:378:45
TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type 'PropsWithoutRef<P> & { ref: ForwardedRef<any>; }' is not assignable to parameter of type '(Attributes & P) | null | undefined'.
      Type 'PropsWithoutRef<P> & { ref: ForwardedRef<any>; }' is not assignable to type 'Attributes & P'.
        Type 'PropsWithoutRef<P> & { ref: ForwardedRef<any>; }' is not assignable to type 'P'.
          'PropsWithoutRef<P> & { ref: ForwardedRef<any>; }' is assignable to the constraint of type 'P', but 'P' could be instantiated with a different subtype of constraint 'object'.
    376 |       });
    377 |
  > 378 |       return React.createElement(Component, { ...props, ref });
        |                                             ^^^^^^^^^^^^^^^^^
    379 |     });
    380 |
    381 |     WrappedComponent.displayName = `withPerformanceMonitoring(${name})`;
ERROR in src/utils/performance.ts:438:12
TS2686: 'React' refers to a UMD global, but the current file is a module. Consider adding an import instead.
    436 |    */
    437 |   lazyLoad: <T>(importFn: () => Promise<T>) => {
  > 438 |     return React.lazy(() =>
        |            ^^^^^
    439 |       importFn().catch((error) => {
    440 |         console.error('[Performance] Lazy loading failed:', error);
    441 |         // Return a fallback component
ERROR in src/utils/performance.ts:439:7
TS2322: Type 'Promise<T | { default: () => DetailedReactHTMLElement<HTMLAttributes<HTMLElement>, HTMLElement>; }>' is not assignable to type 'Promise<{ default: () => DetailedReactHTMLElement<HTMLAttributes<HTMLElement>, HTMLElement>; }>'.
  Type 'T | { default: () => DetailedReactHTMLElement<HTMLAttributes<HTMLElement>, HTMLElement>; }' is not assignable to type '{ default: () => DetailedReactHTMLElement<HTMLAttributes<HTMLElement>, HTMLElement>; }'.
    Type 'T' is not assignable to type '{ default: () => DetailedReactHTMLElement<HTMLAttributes<HTMLElement>, HTMLElement>; }'.
    437 |   lazyLoad: <T>(importFn: () => Promise<T>) => {
    438 |     return React.lazy(() =>
  > 439 |       importFn().catch((error) => {
        |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 440 |         console.error('[Performance] Lazy loading failed:', error);
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 441 |         // Return a fallback component
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 442 |         return { default: () => React.createElement('div', null, 'Loading failed') };
        | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 443 |       })
        | ^^^^^^^^^
    444 |     );
    445 |   },
    446 |
ERROR in src/utils/performance.ts:442:33
TS2686: 'React' refers to a UMD global, but the current file is a module. Consider adding an import instead.
    440 |         console.error('[Performance] Lazy loading failed:', error);
    441 |         // Return a fallback component
  > 442 |         return { default: () => React.createElement('div', null, 'Loading failed') };
        |                                 ^^^^^
    443 |       })
    444 |     );
    445 |   },