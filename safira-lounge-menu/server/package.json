{
  "name": "safira-lounge-server",
  "version": "2.0.0",
  "description": "TypeScript Backend API Server for Safira Lounge Menu",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "build:watch": "tsc --watch",
    "start": "node dist/index.js",
    "dev": "nodemon --exec ts-node -r tsconfig-paths/register src/index.ts",
    "dev:inspect": "nodemon --inspect --exec ts-node -r tsconfig-paths/register src/index.ts",
    "clean": "rimraf dist",
    "typecheck": "tsc --noEmit",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "prepare": "npm run build"
  },
  "keywords": [
    "typescript",
    "express",
    "api",
    "restaurant",
    "menu",
    "lounge"
  ],
  "author": "Safira Lounge Development Team",
  "license": "MIT",
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "csrf": "^3.1.0",
    "dotenv": "^17.2.1",
    "express": "^4.21.2",
    "express-rate-limit": "^8.1.0",
    "express-validator": "^7.2.1",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "mysql2": "^3.14.3",
    "openai": "^5.16.0",
    "qrcode": "^1.5.3"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "@types/express": "^4.17.23",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/multer": "^1.4.13",
    "@types/node": "^20.10.0",
    "@types/qrcode": "^1.5.5",
    "@typescript-eslint/eslint-plugin": "^6.13.0",
    "@typescript-eslint/parser": "^6.13.0",
    "eslint": "^8.54.0",
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "rimraf": "^5.0.5",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.3.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src"
    ],
    "testMatch": [
      "**/__tests__/**/*.ts",
      "**/?(*.)+(spec|test).ts"
    ],
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/index.ts"
    ]
  },
  "nodemonConfig": {
    "watch": [
      "src"
    ],
    "ext": "ts,json",
    "ignore": [
      "src/**/*.spec.ts",
      "src/**/*.test.ts"
    ],
    "exec": "ts-node -r tsconfig-paths/register src/index.ts"
  }
}
