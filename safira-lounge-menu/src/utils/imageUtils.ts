/**
 * Image Utilities
 * Helper functions for responsive image handling
 */

/**
 * Generate srcset from a base responsive image URL
 *
 * @param baseUrl - Base image URL (should contain _600w.webp or _NNNNw.webp)
 * @returns srcset string with all responsive sizes
 *
 * @example
 * generateSrcSet('/images/categories/shisha-safira_600w.webp')
 * // Returns: '/images/categories/shisha-safira_300w.webp 300w, /images/categories/shisha-safira_600w.webp 600w, ...'
 */
export function generateSrcSet(baseUrl: string): string {
  if (!baseUrl) {
    return '';
  }

  // Check if it already has a responsive pattern (_NNNw)
  const hasResponsivePattern = /_\d+w\.(webp|jpg|jpeg|png)$/i.test(baseUrl);

  if (!hasResponsivePattern) {
    // Not a responsive image, return empty srcset
    return '';
  }

  const sizes = [300, 600, 900]; // 1200w not generated by optimization script

  // Try to generate srcset, but only return URLs that likely exist
  const srcSetParts = sizes
    .map(width => {
      // Replace any _NNNw with the new width
      const url = baseUrl.replace(/_\d+w\./, `_${width}w.`);
      return `${url} ${width}w`;
    });

  // Always include the base URL as fallback
  return srcSetParts.join(', ');
}

/**
 * Get sizes attribute for responsive images
 * Defines which image size to use at different viewport widths
 *
 * @param maxWidth - Maximum display width in pixels (default: 600)
 * @returns sizes string for img tag
 */
export function getImageSizes(maxWidth: number = 600): string {
  return `(max-width: 768px) 100vw, ${maxWidth}px`;
}

/**
 * Check if URL is a responsive image
 *
 * @param url - Image URL to check
 * @returns true if URL contains responsive image pattern (_300w, _600w, etc.)
 */
export function isResponsiveImage(url: string): boolean {
  return /_\d+w\.webp$/i.test(url);
}

/**
 * Get base URL from any responsive image size
 * Converts any size to 600w (default size)
 *
 * @param url - Responsive image URL
 * @returns Base URL with _600w
 */
export function getBaseImageUrl(url: string): string {
  if (!isResponsiveImage(url)) {
    return url;
  }

  return url.replace(/_\d+w\.webp$/i, '_600w.webp');
}
